'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports CodeFluent.Runtime
Imports CodeFluent.Runtime.Utilities

Namespace S5T
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: .
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.01234.05678"),  _
     System.SerializableAttribute(),  _
     System.ComponentModel.DataObjectAttribute(),  _
     System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, UserName={UserName}"),  _
     System.ComponentModel.TypeConverterAttribute(GetType(CodeFluent.Runtime.Design.NameTypeConverter))>  _
    Partial Public Class IdUser
        Implements System.ICloneable, System.IComparable, System.IComparable(Of S5T.IdUser), CodeFluent.Runtime.ICodeFluentCollectionEntity(Of String), System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable(Of S5T.IdUser), Microsoft.AspNet.Identity.IUser(Of Long), Microsoft.AspNet.Identity.IUser
        
        Private _raisePropertyChangedEvents As Boolean = true
        
        Private _entityState As CodeFluent.Runtime.CodeFluentEntityState
        
        Private _id As Long = -1
        
        Private _userName As String = CType(Nothing, String)
        
        Private _creationDateUTC As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _email As String = CType(Nothing, String)
        
        Private _emailConfirmed As Boolean = CodeFluentPersistence.DefaultBooleanValue
        
        Private _phoneNumber As String = CType(Nothing, String)
        
        Private _phoneNumberConfirmed As Boolean = CodeFluentPersistence.DefaultBooleanValue
        
        Private _password As String = CType(Nothing, String)
        
        Private _lastPasswordChangeDate As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _accessFailedCount As Integer = CodeFluentPersistence.DefaultInt32Value
        
        Private _accessFailedWindowStart As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _lockoutEnabled As Boolean = CodeFluentPersistence.DefaultBooleanValue
        
        Private _lockoutEndDateUtc As System.Nullable(Of Date) = Nothing
        
        Private _lastProfileUpdateDate As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _securityStamp As String = CType(Nothing, String)
        
        Private _twoFactorEnabled As Boolean = CodeFluentPersistence.DefaultBooleanValue
        
        <System.NonSerializedAttribute()>  _
        Private _roles As S5T.IdRoleCollection
        
        <System.NonSerializedAttribute()>  _
        Private _claims As S5T.IdUserClaimCollection
        
        <System.NonSerializedAttribute()>  _
        Private _logins As S5T.IdUserLoginCollection
        
        Private _oUsuariopId As Long = -1
        
        <System.NonSerializedAttribute()>  _
        Private _oUsuario As S5T.Usuario = Nothing
        
        Public Sub New()
            MyBase.New
            Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Overridable Property RaisePropertyChangedEvents() As Boolean
            Get
                Return Me._raisePropertyChangedEvents
            End Get
            Set
                Me._raisePropertyChangedEvents = value
            End Set
        End Property
        
        Public Overridable Property EntityKey() As String Implements CodeFluent.Runtime.ICodeFluentEntity.EntityKey
            Get
                Return Me.Id.ToString
            End Get
            Set
                Me.Id = CType(ConvertUtilities.ChangeType(value, GetType(Long), -1),Long)
            End Set
        End Property
        
        Public Overridable ReadOnly Property EntityDisplayName() As String Implements CodeFluent.Runtime.ICodeFluentEntity.EntityDisplayName
            Get
                Return Me.UserName
            End Get
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(-1,Long)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Long)),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property Id() As Long
            Get
                Return Me._id
            End Get
            Set
                Me._id = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("Id"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property UserName() As String
            Get
                Return Me._userName
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of String).Default.Equals(value, Me._userName) = true) Then
                    Return
                End If
                Dim oldKey As String = Me._userName
                Me._userName = value
                Try 
                    Me.OnCollectionKeyChanged(oldKey)
                Catch __exception As System.ArgumentException
                    Me._userName = oldKey
                    Return
                End Try
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("UserName"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property CreationDateUTC() As Date
            Get
                Return Me._creationDateUTC
            End Get
            Set
                Me._creationDateUTC = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("CreationDateUTC"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property Email() As String
            Get
                Return Me._email
            End Get
            Set
                Me._email = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("Email"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Boolean))>  _
        Public Property EmailConfirmed() As Boolean
            Get
                Return Me._emailConfirmed
            End Get
            Set
                Me._emailConfirmed = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("EmailConfirmed"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property PhoneNumber() As String
            Get
                Return Me._phoneNumber
            End Get
            Set
                Me._phoneNumber = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("PhoneNumber"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Boolean))>  _
        Public Property PhoneNumberConfirmed() As Boolean
            Get
                Return Me._phoneNumberConfirmed
            End Get
            Set
                Me._phoneNumberConfirmed = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("PhoneNumberConfirmed"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property Password() As String
            Get
                Return Me._password
            End Get
            Set
                Me._password = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("Password"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property LastPasswordChangeDate() As Date
            Get
                Return Me._lastPasswordChangeDate
            End Get
            Set
                Me._lastPasswordChangeDate = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("LastPasswordChangeDate"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Integer))>  _
        Public Property AccessFailedCount() As Integer
            Get
                Return Me._accessFailedCount
            End Get
            Set
                Me._accessFailedCount = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("AccessFailedCount"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property AccessFailedWindowStart() As Date
            Get
                Return Me._accessFailedWindowStart
            End Get
            Set
                Me._accessFailedWindowStart = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("AccessFailedWindowStart"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Boolean))>  _
        Public Property LockoutEnabled() As Boolean
            Get
                Return Me._lockoutEnabled
            End Get
            Set
                Me._lockoutEnabled = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("LockoutEnabled"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property LockoutEndDateUtc() As System.Nullable(Of Date)
            Get
                Return Me._lockoutEndDateUtc
            End Get
            Set
                Me._lockoutEndDateUtc = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("LockoutEndDateUtc"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property LastProfileUpdateDate() As Date
            Get
                Return Me._lastProfileUpdateDate
            End Get
            Set
                Me._lastProfileUpdateDate = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("LastProfileUpdateDate"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property SecurityStamp() As String
            Get
                Return Me._securityStamp
            End Get
            Set
                Me._securityStamp = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("SecurityStamp"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Boolean))>  _
        Public Property TwoFactorEnabled() As Boolean
            Get
                Return Me._twoFactorEnabled
            End Get
            Set
                Me._twoFactorEnabled = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("TwoFactorEnabled"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property Roles() As S5T.IdRoleCollection
            Get
                If (Me._roles Is Nothing) Then
                    If ((Me.Id = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._roles = New S5T.IdRoleCollection(Me)
                        Return Me._roles
                    End If
                    Me._roles = S5T.IdRoleCollection.LoadRolesUsersByIdUser(Me)
                End If
                Return Me._roles
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property Claims() As S5T.IdUserClaimCollection
            Get
                If (Me._claims Is Nothing) Then
                    If ((Me.Id = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._claims = New S5T.IdUserClaimCollection(Me)
                        Return Me._claims
                    End If
                    Me._claims = S5T.IdUserClaimCollection.LoadByUser(Me)
                End If
                Return Me._claims
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property Logins() As S5T.IdUserLoginCollection
            Get
                If (Me._logins Is Nothing) Then
                    If ((Me.Id = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._logins = New S5T.IdUserLoginCollection(Me)
                        Return Me._logins
                    End If
                    Me._logins = S5T.IdUserLoginCollection.LoadByUser(Me)
                End If
                Return Me._logins
            End Get
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property oUsuariopId() As Long
            Get
                If ((Me._oUsuariopId = -1)  _
                            AndAlso (Not (Me._oUsuario) Is Nothing)) Then
                    Me._oUsuariopId = Me._oUsuario.pId
                End If
                Return Me._oUsuariopId
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of Long).Default.Equals(value, Me.oUsuariopId) = true) Then
                    Return
                End If
                Me._oUsuario = Nothing
                Me._oUsuariopId = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oUsuario"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oUsuariopId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property oUsuario() As S5T.Usuario
            Get
                If (Me._oUsuario Is Nothing) Then
                    Me._oUsuario = S5T.Usuario.Load(Me._oUsuariopId)
                End If
                Return Me._oUsuario
            End Get
            Set
                If (Not (value) Is Nothing) Then
                    value.oIdUserId = Me.Id
                End If
                Me._oUsuariopId = -1
                Me._oUsuario = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oUsuario"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oUsuariopId"))
            End Set
        End Property
        
        ReadOnly Property System_ComponentModel_IDataErrorInfo_Error() As String Implements System.ComponentModel.IDataErrorInfo.[Error]
            Get
                Return Me.Validate(System.Globalization.CultureInfo.CurrentCulture)
            End Get
        End Property
        
        ReadOnly Property System_ComponentModel_IDataErrorInfo_Item(ByVal columnName As String) As String Implements System.ComponentModel.IDataErrorInfo.Item
            Get
                Return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, Me, columnName, Nothing)
            End Get
        End Property
        
        ReadOnly Property CodeFluent_Runtime_Utilities_IKeyable_System_String__Key() As String Implements CodeFluent.Runtime.Utilities.IKeyable(Of String).Key
            Get
                Return Me.UserName
            End Get
        End Property
        
        Public Overridable Property EntityState() As CodeFluent.Runtime.CodeFluentEntityState Implements CodeFluent.Runtime.ICodeFluentEntity.EntityState
            Get
                Return Me._entityState
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of CodeFluent.Runtime.CodeFluentEntityState).Default.Equals(value, Me.EntityState) = true) Then
                    Return
                End If
                If ((Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted)  _
                            AndAlso (value = CodeFluent.Runtime.CodeFluentEntityState.Modified)) Then
                    Return
                End If
                If ((Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created)  _
                            AndAlso (value = CodeFluent.Runtime.CodeFluentEntityState.Modified)) Then
                    Return
                End If
                Me._entityState = value
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("EntityState"))
            End Set
        End Property
        
        ReadOnly Property Microsoft_AspNet_Identity_IUser_System_Int64__Id() As Long Implements Microsoft.AspNet.Identity.IUser(Of Long).Id
            Get
                Return Me.Id
            End Get
        End Property
        
        Property Microsoft_AspNet_Identity_IUser_System_Int64__UserName() As String Implements Microsoft.AspNet.Identity.IUser(Of Long).UserName
            Get
                Return Me.UserName
            End Get
            Set
                Me.UserName = value
            End Set
        End Property
        
        ReadOnly Property Microsoft_AspNet_Identity_IUser_System_String__Id() As String Implements Microsoft.AspNet.Identity.IUser(Of String).Id
            Get
                Return Me.EntityKey
            End Get
        End Property
        
        Property Microsoft_AspNet_Identity_IUser_System_String__UserName() As String Implements Microsoft.AspNet.Identity.IUser(Of String).UserName
            Get
                Return Me.UserName
            End Get
            Set
                Me.UserName = value
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Public Event EntityAction As CodeFluent.Runtime.CodeFluentEntityActionEventHandler Implements CodeFluent.Runtime.ICodeFluentEntity.EntityAction
        
        Public Event KeyChanged As System.EventHandler(Of CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of String)) Implements CodeFluent.Runtime.Utilities.IKeyable(Of String).KeyChanged
        
        Protected Overridable Sub OnPropertyChanged(ByVal e As System.ComponentModel.PropertyChangedEventArgs)
            If (Me.RaisePropertyChangedEvents = false) Then
                Return
            End If
            If (Not (Me.PropertyChangedEvent) Is Nothing) Then
                RaiseEvent PropertyChanged(Me, e)
            End If
        End Sub
        
        Protected Overridable Sub OnEntityAction(ByVal e As CodeFluent.Runtime.CodeFluentEntityActionEventArgs)
            If (Not (Me.EntityActionEvent) Is Nothing) Then
                RaiseEvent EntityAction(Me, e)
            End If
        End Sub
        
        Public Overloads Overridable Function Equals(ByVal idUser As S5T.IdUser) As Boolean Implements System.IEquatable(Of S5T.IdUser).Equals
            If (idUser Is Nothing) Then
                Return false
            End If
            If (Me.Id = -1) Then
                Return MyBase.Equals(idUser)
            End If
            Return (Me.Id.Equals(idUser.Id) = true)
        End Function
        
        Public Overloads Overrides Function GetHashCode() As Integer
            Return Me.Id.GetHashCode
        End Function
        
        Public Overloads Overrides Function Equals(ByVal obj As Object) As Boolean
            Dim idUser As S5T.IdUser = Nothing
            Try 
                idUser = CType(obj,S5T.IdUser)
            Catch icex As System.InvalidCastException
                idUser = Nothing
            End Try
            Return Me.Equals(idUser)
        End Function
        
        Friend Sub SaveRolesRelations()
            If (Me._roles Is Nothing) Then
                Return
            End If
            Dim enumerator As System.Collections.IEnumerator = CType(Me._roles,CodeFluent.Runtime.ICodeFluentSet).Relations.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                Dim idRole As S5T.IdRole = CType(entry.Key,S5T.IdRole)
                Dim relationType As CodeFluent.Runtime.CodeFluentRelationType = CType(entry.Value,CodeFluent.Runtime.CodeFluentRelationType)
                If ((relationType = CodeFluent.Runtime.CodeFluentRelationType.Added)  _
                            AndAlso ((idRole.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked)  _
                            = false)) Then
                    Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "SaveIdRoleUsers")
                    persistence.AddParameter("@Id", idRole.Id, CType(-1,Long))
                    persistence.AddParameter("@Id2", Me.Id, CType(-1,Long))
                    persistence.ExecuteNonQuery
                Else
                    Dim persistence1 As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence1.CreateStoredProcedureCommand(Nothing, "IdUser", "DeleteIdRoleUsers")
                    persistence1.AddParameter("@Id", idRole.Id, CType(-1,Long))
                    persistence1.AddParameter("@Id2", Me.Id, CType(-1,Long))
                    persistence1.ExecuteNonQuery
                End If
                If (idRole.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked) Then
                    idRole.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                b = enumerator.MoveNext
            Loop
            CType(Me._roles,CodeFluent.Runtime.ICodeFluentSet).Relations.Clear
        End Sub
        
        Overridable Function System_IComparable_CompareTo(ByVal value As Object) As Integer Implements System.IComparable.CompareTo
            Dim idUser As S5T.IdUser = Nothing
            Try 
                idUser = CType(value,S5T.IdUser)
            Catch icex As System.InvalidCastException
                idUser = Nothing
            End Try
            If (idUser Is Nothing) Then
                Throw New System.ArgumentException("value")
            End If
            Dim localCompareTo As Integer = Me.CompareTo(idUser)
            Return localCompareTo
        End Function
        
        Public Overridable Function CompareTo(ByVal idUser As S5T.IdUser) As Integer Implements System.IComparable(Of S5T.IdUser).CompareTo
            If (idUser Is Nothing) Then
                Throw New System.ArgumentNullException("idUser")
            End If
            Dim localCompareTo As Integer = Me.UserName.CompareTo(idUser.UserName)
            Return localCompareTo
        End Function
        
        Public Overloads Overridable Function Validate(ByVal culture As System.Globalization.CultureInfo) As String
            Return CodeFluentPersistence.Validate(culture, Me, Nothing)
        End Function
        
        Public Overloads Overridable Sub Validate(ByVal culture As System.Globalization.CultureInfo, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException)) Implements CodeFluent.Runtime.ICodeFluentSummaryValidator.Validate
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results)
            evt.Culture = culture
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Dim externalValidate As String
                If (Not (evt.Argument) Is Nothing) Then
                    externalValidate = evt.Argument.ToString
                Else
                    externalValidate = S5T.Resources.Manager.GetStringWithDefault(culture, "S5T.IdUser.ExternalValidate", "Type 'S5T.IdUser' cannot be validated.", Nothing)
                End If
                CodeFluentPersistence.AddValidationError(results, externalValidate)
            End If
            CodeFluentPersistence.ValidateMember(culture, results, Me, Nothing)
            If (Me.UserName Is CType(Nothing, String)) Then
                Dim localValidate As String = S5T.Resources.Manager.GetStringWithDefault(culture, "S5T.IdUser.UserName.NullException", "'UserName' property cannot be set to '' for type 'S5T.IdUser'", Nothing)
                CodeFluentPersistence.AddValidationError(results, localValidate)
            End If
            If (Me.SecurityStamp Is CType(Nothing, String)) Then
                Dim localValidate1 As String = S5T.Resources.Manager.GetStringWithDefault(culture, "S5T.IdUser.SecurityStamp.NullException", "'SecurityStamp' property cannot be set to '' for type 'S5T.IdUser'", Nothing)
                CodeFluentPersistence.AddValidationError(results, localValidate1)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results))
        End Sub
        
        Public Overloads Sub Validate()
            Dim var As String = Me.Validate(System.Globalization.CultureInfo.CurrentCulture)
            If (Not (var) Is Nothing) Then
                Throw New CodeFluent.Runtime.CodeFluentValidationException(var)
            End If
        End Sub
        
        Function CodeFluent_Runtime_ICodeFluentValidator_Validate(ByVal culture As System.Globalization.CultureInfo) As String Implements CodeFluent.Runtime.ICodeFluentValidator.Validate
            Dim localValidate As String = Me.Validate(culture)
            Return localValidate
        End Function
        
        Sub CodeFluent_Runtime_ICodeFluentMemberValidator_Validate(ByVal culture As System.Globalization.CultureInfo, ByVal memberName As String, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException)) Implements CodeFluent.Runtime.ICodeFluentMemberValidator.Validate
            Me.ValidateMember(culture, memberName, results)
        End Sub
        
        Public Overloads Overridable Function Delete() As Boolean Implements CodeFluent.Runtime.ICodeFluentEntity.Delete
            Dim ret As Boolean = false
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return ret
            End If
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "Delete")
            persistence.AddParameter("@Id", Me.Id, CType(-1,Long))
            persistence.ExecuteNonQuery
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false))
            ret = true
            Return ret
        End Function
        
        Protected Overridable Sub ReadRecord(ByVal reader As System.Data.IDataReader, ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (((options And CodeFluent.Runtime.CodeFluentReloadOptions.Properties)  _
                        = 0)  _
                        = false) Then
                Me._id = CodeFluentPersistence.GetReaderValue(reader, "Id", CType(-1,Long))
                Me._userName = CodeFluentPersistence.GetReaderValue(reader, "UserName", CType(CType(Nothing, String),String))
                Me._creationDateUTC = CodeFluentPersistence.GetReaderValue(reader, "CreationDateUTC", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me._email = CodeFluentPersistence.GetReaderValue(reader, "Email", CType(CType(Nothing, String),String))
                Me._emailConfirmed = CodeFluentPersistence.GetReaderValue(reader, "EmailConfirmed", CType(CodeFluentPersistence.DefaultBooleanValue,Boolean))
                Me._phoneNumber = CodeFluentPersistence.GetReaderValue(reader, "PhoneNumber", CType(CType(Nothing, String),String))
                Me._phoneNumberConfirmed = CodeFluentPersistence.GetReaderValue(reader, "PhoneNumberConfirmed", CType(CodeFluentPersistence.DefaultBooleanValue,Boolean))
                Me._password = CodeFluentPersistence.GetReaderValue(reader, "Password", CType(CType(Nothing, String),String))
                Me._lastPasswordChangeDate = CodeFluentPersistence.GetReaderValue(reader, "LastPasswordChangeDate", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me._accessFailedCount = CodeFluentPersistence.GetReaderValue(reader, "AccessFailedCount", CType(CodeFluentPersistence.DefaultInt32Value,Integer))
                Me._accessFailedWindowStart = CodeFluentPersistence.GetReaderValue(reader, "AccessFailedWindowStart", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me._lockoutEnabled = CodeFluentPersistence.GetReaderValue(reader, "LockoutEnabled", CType(CodeFluentPersistence.DefaultBooleanValue,Boolean))
                Me._lockoutEndDateUtc = CodeFluentPersistence.GetReaderValue(Of Date)(reader, "LockoutEndDateUtc")
                Me._lastProfileUpdateDate = CodeFluentPersistence.GetReaderValue(reader, "LastProfileUpdateDate", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me._securityStamp = CodeFluentPersistence.GetReaderValue(reader, "SecurityStamp", CType(CType(Nothing, String),String))
                Me._twoFactorEnabled = CodeFluentPersistence.GetReaderValue(reader, "TwoFactorEnabled", CType(CodeFluentPersistence.DefaultBooleanValue,Boolean))
                Me.oUsuariopId = CodeFluentPersistence.GetReaderValue(reader, "oUsuario_pId", CType(-1,Long))
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false))
        End Sub
        
        Sub CodeFluent_Runtime_ICodeFluentEntity_ReadRecord(ByVal reader As System.Data.IDataReader) Implements CodeFluent.Runtime.ICodeFluentEntity.ReadRecord
            Me.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
        End Sub
        
        Protected Overridable Sub ReadRecordOnSave(ByVal reader As System.Data.IDataReader)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            Me._id = CodeFluentPersistence.GetReaderValue(reader, "Id", CType(-1,Long))
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false))
        End Sub
        
        Sub CodeFluent_Runtime_ICodeFluentEntity_ReadRecordOnSave(ByVal reader As System.Data.IDataReader) Implements CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave
            Me.ReadRecordOnSave(reader)
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shared Function Load(ByVal id As Long) As S5T.IdUser
            If (id = -1) Then
                Return Nothing
            End If
            Dim idUser As S5T.IdUser = New S5T.IdUser()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "Load")
            persistence.AddParameter("@Id", id, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    idUser.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    idUser.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return idUser
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shared Function LoadByUserName(ByVal userName As String) As S5T.IdUser
            If (userName Is CType(Nothing, String)) Then
                Return Nothing
            End If
            Dim idUser As S5T.IdUser = New S5T.IdUser()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "LoadByUserName")
            persistence.AddParameter("@UserName", userName, CType(Nothing, String))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    idUser.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    idUser.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return idUser
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shared Function LoadByoUsuario(ByVal oUsuariopId As Long) As S5T.IdUser
            If (oUsuariopId = -1) Then
                Return Nothing
            End If
            Dim idUser As S5T.IdUser = New S5T.IdUser()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "LoadByoUsuario")
            persistence.AddParameter("@oUsuariopId", oUsuariopId)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    idUser.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    idUser.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return idUser
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shared Function LoadByUserLoginInfo(ByVal providerKey As String, ByVal providerName As String) As S5T.IdUser
            If (providerKey Is CType(Nothing, String)) Then
                Return Nothing
            End If
            If (providerName Is CType(Nothing, String)) Then
                Return Nothing
            End If
            Dim idUser As S5T.IdUser = New S5T.IdUser()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "LoadByUserLoginInfo")
            persistence.AddParameter("@providerKey", providerKey)
            persistence.AddParameter("@providerName", providerName)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    idUser.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    idUser.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return idUser
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shared Function LoadByEmail(ByVal email As String) As S5T.IdUser
            If (email Is CType(Nothing, String)) Then
                Return Nothing
            End If
            Dim idUser As S5T.IdUser = New S5T.IdUser()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "LoadByEmail")
            persistence.AddParameter("@Email", email, CType(Nothing, String))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    idUser.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    idUser.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return idUser
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        Public Overridable Function Reload(ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions) As Boolean
            Dim ret As Boolean = false
            If (Me.Id = -1) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "Load")
            persistence.AddParameter("@Id", Me.Id, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecord(reader, options)
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    ret = true
                Else
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return ret
        End Function
        
        Protected Overridable Function BaseSave(ByVal force As Boolean) As Boolean
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) Then
                S5T.IdUser.Delete(Me)
                Return false
            End If
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return false
            End If
            CodeFluentPersistence.ThrowIfDeleted(Me)
            Me.Validate
            If ((force = false)  _
                        AndAlso (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged)) Then
                Return false
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUser", "Save")
            persistence.AddParameter("@Id", Me.Id, CType(-1,Long))
            persistence.AddParameter("@UserName", Me.UserName, CType(Nothing, String))
            persistence.AddRawParameter("@CreationDateUTC", Me.CreationDateUTC)
            persistence.AddParameter("@Email", Me.Email, CType(Nothing, String))
            persistence.AddRawParameter("@EmailConfirmed", Me.EmailConfirmed)
            persistence.AddParameter("@PhoneNumber", Me.PhoneNumber, CType(Nothing, String))
            persistence.AddRawParameter("@PhoneNumberConfirmed", Me.PhoneNumberConfirmed)
            persistence.AddParameter("@Password", Me.Password, CType(Nothing, String))
            persistence.AddParameter("@LastPasswordChangeDate", Me.LastPasswordChangeDate, CodeFluentPersistence.DefaultDateTimeValue)
            persistence.AddRawParameter("@AccessFailedCount", Me.AccessFailedCount)
            persistence.AddParameter("@AccessFailedWindowStart", Me.AccessFailedWindowStart, CodeFluentPersistence.DefaultDateTimeValue)
            persistence.AddRawParameter("@LockoutEnabled", Me.LockoutEnabled)
            persistence.AddParameter("@LockoutEndDateUtc", Me.LockoutEndDateUtc)
            persistence.AddParameter("@LastProfileUpdateDate", Me.LastProfileUpdateDate, CodeFluentPersistence.DefaultDateTimeValue)
            persistence.AddParameter("@SecurityStamp", Me.SecurityStamp, CType(Nothing, String))
            persistence.AddRawParameter("@TwoFactorEnabled", Me.TwoFactorEnabled)
            persistence.AddParameter("@oUsuario_pId", Me.oUsuariopId, CType(-1,Long))
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecordOnSave(reader)
                End If
                CodeFluentPersistence.NextResults(reader)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Me.SaveRolesRelations
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false))
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
            Return true
        End Function
        
        Public Overloads Overridable Function Save() As Boolean Implements CodeFluent.Runtime.ICodeFluentEntity.Save
            Dim localSave As Boolean = Me.BaseSave(false)
            Return localSave
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Shared Function Save(ByVal idUser As S5T.IdUser) As Boolean
            If (idUser Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = idUser.Save
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Shared Function Insert(ByVal idUser As S5T.IdUser) As Boolean
            Dim ret As Boolean = S5T.IdUser.Save(idUser)
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Shared Function Delete(ByVal idUser As S5T.IdUser) As Boolean
            If (idUser Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = idUser.Delete
            Return ret
        End Function
        
        Public Function Trace() As String
            Dim stringBuilder As System.Text.StringBuilder = New System.Text.StringBuilder()
            Dim stringWriter As System.IO.StringWriter = New System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture)
            Dim writer As System.CodeDom.Compiler.IndentedTextWriter = New System.CodeDom.Compiler.IndentedTextWriter(stringWriter)
            Me.BaseTrace(writer)
            writer.Flush
            CType(writer,System.IDisposable).Dispose
            CType(stringWriter,System.IDisposable).Dispose
            Dim sr As String = stringBuilder.ToString
            Return sr
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub CodeFluent_Runtime_ICodeFluentObject_Trace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter) Implements CodeFluent.Runtime.ICodeFluentObject.Trace
            Me.BaseTrace(writer)
        End Sub
        
        Protected Overridable Sub BaseTrace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter)
            writer.Write("[")
            writer.Write("Id=")
            writer.Write(Me.Id)
            writer.Write(",")
            writer.Write("UserName=")
            writer.Write(Me.UserName)
            writer.Write(",")
            writer.Write("CreationDateUTC=")
            writer.Write(Me.CreationDateUTC)
            writer.Write(",")
            writer.Write("Email=")
            writer.Write(Me.Email)
            writer.Write(",")
            writer.Write("EmailConfirmed=")
            writer.Write(Me.EmailConfirmed)
            writer.Write(",")
            writer.Write("PhoneNumber=")
            writer.Write(Me.PhoneNumber)
            writer.Write(",")
            writer.Write("PhoneNumberConfirmed=")
            writer.Write(Me.PhoneNumberConfirmed)
            writer.Write(",")
            writer.Write("Password=")
            writer.Write(Me.Password)
            writer.Write(",")
            writer.Write("LastPasswordChangeDate=")
            writer.Write(Me.LastPasswordChangeDate)
            writer.Write(",")
            writer.Write("AccessFailedCount=")
            writer.Write(Me.AccessFailedCount)
            writer.Write(",")
            writer.Write("AccessFailedWindowStart=")
            writer.Write(Me.AccessFailedWindowStart)
            writer.Write(",")
            writer.Write("LockoutEnabled=")
            writer.Write(Me.LockoutEnabled)
            writer.Write(",")
            writer.Write("LockoutEndDateUtc=")
            writer.Write(Me.LockoutEndDateUtc)
            writer.Write(",")
            writer.Write("LastProfileUpdateDate=")
            writer.Write(Me.LastProfileUpdateDate)
            writer.Write(",")
            writer.Write("SecurityStamp=")
            writer.Write(Me.SecurityStamp)
            writer.Write(",")
            writer.Write("TwoFactorEnabled=")
            writer.Write(Me.TwoFactorEnabled)
            writer.Write(",")
            writer.Write("Roles=")
            If (Not (Me._roles) Is Nothing) Then
                CType(Me._roles,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("Claims=")
            If (Not (Me._claims) Is Nothing) Then
                CType(Me._claims,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("Logins=")
            If (Not (Me._logins) Is Nothing) Then
                CType(Me._logins,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("oUsuario=")
            If (Not (Me._oUsuario) Is Nothing) Then
                CType(Me._oUsuario,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("_oUsuariopId=")
            writer.Write(Me._oUsuariopId)
            writer.Write(", EntityState=")
            writer.Write(Me.EntityState)
            writer.Write("]")
        End Sub
        
        Public Overloads Overridable Sub SetRoles(ByVal values As System.Collections.IDictionary)
            If (values Is Nothing) Then
                Throw New System.ArgumentNullException("values")
            End If
            Me.Roles.Clear
            Dim enumerator As System.Collections.IEnumerator = values.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                If (Not (entry.Key) Is Nothing) Then
                    Me.Roles.AddByEntityKey(entry.Key.ToString)
                End If
                b = enumerator.MoveNext
            Loop
        End Sub
        
        Public Overloads Overridable Sub SetRoles(ByVal values As Object)
            If (values Is Nothing) Then
                Return
            End If
            Dim dictionary As System.Collections.IDictionary = Nothing
            Try 
                dictionary = CType(values,System.Collections.IDictionary)
            Catch icex As System.InvalidCastException
                dictionary = Nothing
            End Try
            If (Not (dictionary) Is Nothing) Then
                Me.SetRoles(dictionary)
                Return
            End If
            Dim roles As S5T.IdRoleCollection = Nothing
            Try 
                roles = CType(values,S5T.IdRoleCollection)
            Catch icex1 As System.InvalidCastException
                roles = Nothing
            End Try
            If (Not (roles) Is Nothing) Then
                Me._roles = roles
                Return
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shared Function LoadByEntityKey(ByVal key As String) As S5T.IdUser
            If (key Is String.Empty) Then
                Return Nothing
            End If
            Dim idUser As S5T.IdUser
            Dim var As Long = CType(ConvertUtilities.ChangeType(key, GetType(Long), -1),Long)
            idUser = S5T.IdUser.Load(var)
            Return idUser
        End Function
        
        Protected Overridable Sub ValidateMember(ByVal culture As System.Globalization.CultureInfo, ByVal memberName As String, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException))
        End Sub
        
        Public Overloads Function Clone(ByVal deep As Boolean) As S5T.IdUser
            Dim idUser As S5T.IdUser = New S5T.IdUser()
            Me.CopyTo(idUser, deep)
            Return idUser
        End Function
        
        Public Overloads Function Clone() As S5T.IdUser
            Dim localClone As S5T.IdUser = Me.Clone(true)
            Return localClone
        End Function
        
        Function System_ICloneable_Clone() As Object Implements System.ICloneable.Clone
            Dim localClone As Object = Me.Clone
            Return localClone
        End Function
        
        Public Overridable Sub CopyFrom(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            If (dict.Contains("Id") = true) Then
                Me.Id = CType(ConvertUtilities.ChangeType(dict("Id"), GetType(Long), -1),Long)
            End If
            If (dict.Contains("UserName") = true) Then
                Me.UserName = CType(ConvertUtilities.ChangeType(dict("UserName"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("LockoutEnabled") = true) Then
                Me.LockoutEnabled = CType(ConvertUtilities.ChangeType(dict("LockoutEnabled"), GetType(Boolean), CodeFluentPersistence.DefaultBooleanValue),Boolean)
            End If
            If (dict.Contains("AccessFailedWindowStart") = true) Then
                Me.AccessFailedWindowStart = CType(ConvertUtilities.ChangeType(dict("AccessFailedWindowStart"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("AccessFailedCount") = true) Then
                Me.AccessFailedCount = CType(ConvertUtilities.ChangeType(dict("AccessFailedCount"), GetType(Integer), CodeFluentPersistence.DefaultInt32Value),Integer)
            End If
            If (dict.Contains("LockoutEndDateUtc") = true) Then
                Me.LockoutEndDateUtc = CType(ConvertUtilities.ChangeType(dict("LockoutEndDateUtc"), GetType(System.Nullable(Of System.DateTime)), Nothing),System.Nullable(Of System.DateTime))
            End If
            If (dict.Contains("TwoFactorEnabled") = true) Then
                Me.TwoFactorEnabled = CType(ConvertUtilities.ChangeType(dict("TwoFactorEnabled"), GetType(Boolean), CodeFluentPersistence.DefaultBooleanValue),Boolean)
            End If
            If (dict.Contains("SecurityStamp") = true) Then
                Me.SecurityStamp = CType(ConvertUtilities.ChangeType(dict("SecurityStamp"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("LastProfileUpdateDate") = true) Then
                Me.LastProfileUpdateDate = CType(ConvertUtilities.ChangeType(dict("LastProfileUpdateDate"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("EmailConfirmed") = true) Then
                Me.EmailConfirmed = CType(ConvertUtilities.ChangeType(dict("EmailConfirmed"), GetType(Boolean), CodeFluentPersistence.DefaultBooleanValue),Boolean)
            End If
            If (dict.Contains("Email") = true) Then
                Me.Email = CType(ConvertUtilities.ChangeType(dict("Email"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("CreationDateUTC") = true) Then
                Me.CreationDateUTC = CType(ConvertUtilities.ChangeType(dict("CreationDateUTC"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("PhoneNumber") = true) Then
                Me.PhoneNumber = CType(ConvertUtilities.ChangeType(dict("PhoneNumber"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("LastPasswordChangeDate") = true) Then
                Me.LastPasswordChangeDate = CType(ConvertUtilities.ChangeType(dict("LastPasswordChangeDate"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("Password") = true) Then
                Me.Password = CType(ConvertUtilities.ChangeType(dict("Password"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("PhoneNumberConfirmed") = true) Then
                Me.PhoneNumberConfirmed = CType(ConvertUtilities.ChangeType(dict("PhoneNumberConfirmed"), GetType(Boolean), CodeFluentPersistence.DefaultBooleanValue),Boolean)
            End If
            If (dict.Contains("oUsuariopId") = true) Then
                Me.oUsuariopId = CType(ConvertUtilities.ChangeType(dict("oUsuariopId"), GetType(Long), -1),Long)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal idUser As S5T.IdUser, ByVal deep As Boolean)
            If (idUser Is Nothing) Then
                Throw New System.ArgumentNullException("idUser")
            End If
            idUser.Id = Me.Id
            idUser.UserName = Me.UserName
            idUser.LockoutEnabled = Me.LockoutEnabled
            idUser.AccessFailedWindowStart = Me.AccessFailedWindowStart
            idUser.AccessFailedCount = Me.AccessFailedCount
            idUser.LockoutEndDateUtc = Me.LockoutEndDateUtc
            idUser.TwoFactorEnabled = Me.TwoFactorEnabled
            idUser.SecurityStamp = Me.SecurityStamp
            idUser.LastProfileUpdateDate = Me.LastProfileUpdateDate
            idUser.EmailConfirmed = Me.EmailConfirmed
            idUser.Email = Me.Email
            idUser.CreationDateUTC = Me.CreationDateUTC
            idUser.PhoneNumber = Me.PhoneNumber
            idUser.LastPasswordChangeDate = Me.LastPasswordChangeDate
            idUser.Password = Me.Password
            idUser.PhoneNumberConfirmed = Me.PhoneNumberConfirmed
            idUser.oUsuariopId = Me.oUsuariopId
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, idUser))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            dict("Id") = Me.Id
            dict("UserName") = Me.UserName
            dict("LockoutEnabled") = Me.LockoutEnabled
            dict("AccessFailedWindowStart") = Me.AccessFailedWindowStart
            dict("AccessFailedCount") = Me.AccessFailedCount
            dict("LockoutEndDateUtc") = Me.LockoutEndDateUtc
            dict("TwoFactorEnabled") = Me.TwoFactorEnabled
            dict("SecurityStamp") = Me.SecurityStamp
            dict("LastProfileUpdateDate") = Me.LastProfileUpdateDate
            dict("EmailConfirmed") = Me.EmailConfirmed
            dict("Email") = Me.Email
            dict("CreationDateUTC") = Me.CreationDateUTC
            dict("PhoneNumber") = Me.PhoneNumber
            dict("LastPasswordChangeDate") = Me.LastPasswordChangeDate
            dict("Password") = Me.Password
            dict("PhoneNumberConfirmed") = Me.PhoneNumberConfirmed
            dict("oUsuariopId") = Me.oUsuariopId
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict))
        End Sub
        
        Protected Sub OnCollectionKeyChanged(ByVal key As String)
            If (Not (Me.KeyChangedEvent) Is Nothing) Then
                RaiseEvent KeyChanged(Me, New CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of String)(key))
            End If
        End Sub
    End Class
End Namespace
