'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports CodeFluent.Runtime
Imports CodeFluent.Runtime.Utilities

Namespace S5T
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: .
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.01234.05678"),  _
     System.SerializableAttribute(),  _
     System.ComponentModel.DataObjectAttribute(),  _
     System.Diagnostics.DebuggerDisplayAttribute("Count={Count}"),  _
     System.ComponentModel.TypeConverterAttribute(GetType(CodeFluent.Runtime.Design.CollectionTypeConverter))>  _
    Partial Public Class IdUserClaimCollection
        Implements System.Collections.IList, System.Collections.ICollection, CodeFluent.Runtime.ICodeFluentSet, System.Collections.Generic.IList(Of S5T.IdUserClaim), System.Collections.Generic.ICollection(Of S5T.IdUserClaim), System.ComponentModel.IRaiseItemChangedEvents, System.ICloneable, System.ComponentModel.INotifyPropertyChanged, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.IBindingList, System.ComponentModel.ICancelAddNew
        
        Private _raisePropertyChangedEvents As Boolean = true
        
        Private _raiseCollectionChangedEvents As Boolean = true
        
        <System.NonSerializedAttribute()>  _
        Private _baseList As System.Collections.Generic.List(Of S5T.IdUserClaim) = New System.Collections.Generic.List(Of S5T.IdUserClaim)()
        
        <System.NonSerializedAttribute()>  _
        Private _baseTable As System.Collections.Generic.Dictionary(Of Long, S5T.IdUserClaim) = New System.Collections.Generic.Dictionary(Of Long, S5T.IdUserClaim)()
        
        <System.NonSerializedAttribute()>  _
        Private _relations As System.Collections.Hashtable = New System.Collections.Hashtable()
        
        Private _maxCount As Integer = 2147483647
        
        <System.NonSerializedAttribute()>  _
        Private _claimsIdUserUser As S5T.IdUser
        
        <System.NonSerializedAttribute()>  _
        Private _addNewPos As Integer = -1
        
        <System.NonSerializedAttribute()>  _
        Private _blm2492310655 As CodeFluent.Runtime.Utilities.BindingListManager(Of S5T.IdUserClaim)
        
        Private _raiseListChangedEvents As Boolean = true
        
Public Event CollectionChanged As System.ComponentModel.CollectionChangeEventHandler Implements CodeFluent.Runtime.ICodeFluentSet.CollectionChanged
Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
Private Event System_Collections_Specialized_INotifyCollectionChanged_CollectionChanged As System.Collections.Specialized.NotifyCollectionChangedEventHandler Implements System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
        Private _h2943838991 As Object
        
        Public Sub New()
            MyBase.New
            Me._blm2492310655 = New CodeFluent.Runtime.Utilities.BindingListManager(Of S5T.IdUserClaim)(Me)
        End Sub
        
        Public Sub New(ByVal claimsIdUserUser As S5T.IdUser)
            MyBase.New
            Me._blm2492310655 = New CodeFluent.Runtime.Utilities.BindingListManager(Of S5T.IdUserClaim)(Me)
            Me._claimsIdUserUser = claimsIdUserUser
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Overridable Property RaisePropertyChangedEvents() As Boolean
            Get
                Return Me._raisePropertyChangedEvents
            End Get
            Set
                Me._raisePropertyChangedEvents = value
            End Set
        End Property
        
        Public Overridable Property RaiseCollectionChangedEvents() As Boolean
            Get
                Return Me._raiseCollectionChangedEvents
            End Get
            Set
                Me._raiseCollectionChangedEvents = value
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Protected ReadOnly Property BaseList() As System.Collections.Generic.List(Of S5T.IdUserClaim)
            Get
                Return Me._baseList
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Protected ReadOnly Property BaseTable() As System.Collections.Generic.Dictionary(Of Long, S5T.IdUserClaim)
            Get
                Return Me._baseTable
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property Relations() As System.Collections.IDictionary Implements CodeFluent.Runtime.ICodeFluentSet.Relations
            Get
                Return Me._relations
            End Get
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false)>  _
        Public Overridable Property MaxCount() As Integer
            Get
                Return Me._maxCount
            End Get
            Set
                Me._maxCount = value
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property ClaimsIdUserUser() As S5T.IdUser
            Get
                Return Me._claimsIdUserUser
            End Get
        End Property
        
        Public Overloads Default Property Item(ByVal index As Integer) As S5T.IdUserClaim Implements System.Collections.Generic.IList(Of S5T.IdUserClaim).Item
            Get
                Return CType(Me.BaseList(index),S5T.IdUserClaim)
            End Get
            Set
                Me.BaseList(index) = value
            End Set
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Property System_Collections_IList_Item(ByVal index As Integer) As Object Implements System.Collections.IList.Item
            Get
                Dim i As Object = Me.BaseList(index)
                Return i
            End Get
            Set
                Me.BaseList(index) = CType(value,S5T.IdUserClaim)
            End Set
        End Property
        
        Public Overloads Default Property Item(ByVal id As Long) As S5T.IdUserClaim
            Get
                If (id = -1) Then
                    Throw New System.ArgumentNullException("id")
                End If
                Dim i As S5T.IdUserClaim = Me.TryGetValue(id)
                Return i
            End Get
            Set
                If (id = -1) Then
                    Throw New System.ArgumentNullException("id")
                End If
                If (value Is Nothing) Then
                    Dim idUserClaim As S5T.IdUserClaim = Me.TryGetValue(id)
                    If (Not (idUserClaim) Is Nothing) Then
                        Me.Remove(idUserClaim)
                    End If
                    Return
                End If
                Dim existing As S5T.IdUserClaim = Me.TryGetValue(value.Id)
                If (Not (existing) Is Nothing) Then
                    Me.Remove(existing)
                End If
                Me.Add(value)
            End Set
        End Property
        
        Public Overridable ReadOnly Property Count() As Integer Implements System.Collections.Generic.ICollection(Of S5T.IdUserClaim).Count
            Get
                Dim v As Integer = CType(Me.BaseList,System.Collections.IList).Count
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_ICollection_Count() As Integer Implements System.Collections.ICollection.Count
            Get
                Dim v As Integer = Me.Count
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property CodeFluent_Runtime_ICodeFluentSet_Count() As Integer Implements CodeFluent.Runtime.ICodeFluentSet.Count
            Get
                Dim v As Integer = Me.Count
                Return v
            End Get
        End Property
        
        Public Overridable ReadOnly Property IsSynchronized() As Boolean
            Get
                Dim v As Boolean = CType(Me.BaseList,System.Collections.IList).IsSynchronized
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_ICollection_IsSynchronized() As Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Dim v As Boolean = Me.IsSynchronized
                Return v
            End Get
        End Property
        
        Public Overridable ReadOnly Property SyncRoot() As Object
            Get
                Dim v As Object = CType(Me.BaseList,System.Collections.IList).SyncRoot
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_ICollection_SyncRoot() As Object Implements System.Collections.ICollection.SyncRoot
            Get
                Dim v As Object = Me.SyncRoot
                Return v
            End Get
        End Property
        
        Public Overridable ReadOnly Property IsFixedSize() As Boolean
            Get
                Dim v As Boolean = CType(Me.BaseList,System.Collections.IList).IsFixedSize
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_IList_IsFixedSize() As Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Dim v As Boolean = Me.IsFixedSize
                Return v
            End Get
        End Property
        
        Public Overridable ReadOnly Property IsReadOnly() As Boolean Implements System.Collections.Generic.ICollection(Of S5T.IdUserClaim).IsReadOnly
            Get
                Dim v As Boolean = CType(Me.BaseList,System.Collections.IList).IsReadOnly
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_IList_IsReadOnly() As Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Dim v As Boolean = Me.IsReadOnly
                Return v
            End Get
        End Property
        
        Public Overridable Property RaiseListChangedEvents() As Boolean
            Get
                Return Me._raiseListChangedEvents
            End Get
            Set
                Me._raiseListChangedEvents = value
            End Set
        End Property
        
        Private ReadOnly Property AllowEdit() As Boolean Implements System.ComponentModel.IBindingList.AllowEdit
            Get
                Return Me._blm2492310655.AllowEdit
            End Get
        End Property
        
        Private ReadOnly Property AllowNew() As Boolean Implements System.ComponentModel.IBindingList.AllowNew
            Get
                Return Me._blm2492310655.AllowNew
            End Get
        End Property
        
        Private ReadOnly Property AllowRemove() As Boolean Implements System.ComponentModel.IBindingList.AllowRemove
            Get
                Return Me._blm2492310655.AllowRemove
            End Get
        End Property
        
        Private ReadOnly Property IsSorted() As Boolean Implements System.ComponentModel.IBindingList.IsSorted
            Get
                Return Me._blm2492310655.IsSorted
            End Get
        End Property
        
        Private ReadOnly Property SortDirection() As System.ComponentModel.ListSortDirection Implements System.ComponentModel.IBindingList.SortDirection
            Get
                Return Me._blm2492310655.SortDirection
            End Get
        End Property
        
        Private ReadOnly Property SortProperty() As System.ComponentModel.PropertyDescriptor Implements System.ComponentModel.IBindingList.SortProperty
            Get
                Return Me._blm2492310655.SortProperty
            End Get
        End Property
        
        Private ReadOnly Property SupportsChangeNotification() As Boolean Implements System.ComponentModel.IBindingList.SupportsChangeNotification
            Get
                Return true
            End Get
        End Property
        
        Private ReadOnly Property SupportsSearching() As Boolean Implements System.ComponentModel.IBindingList.SupportsSearching
            Get
                Return Me._blm2492310655.SupportsSearching
            End Get
        End Property
        
        Private ReadOnly Property SupportsSorting() As Boolean Implements System.ComponentModel.IBindingList.SupportsSorting
            Get
                Return Me._blm2492310655.SupportsSorting
            End Get
        End Property
        
        Private ReadOnly Property RaisesItemChangedEvents() As Boolean Implements System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents
            Get
                Return Me.RaiseListChangedEvents
            End Get
        End Property
        
        Public Event AddingNew As System.ComponentModel.AddingNewEventHandler
        
        Public Event ListChanged As System.ComponentModel.ListChangedEventHandler Implements System.ComponentModel.IBindingList.ListChanged
        
        Protected Overridable Sub OnPropertyChanged(ByVal e As System.ComponentModel.PropertyChangedEventArgs)
            If (Me.RaisePropertyChangedEvents = false) Then
                Return
            End If
            If (Not (Me.PropertyChangedEvent) Is Nothing) Then
                RaiseEvent PropertyChanged(Me, e)
            End If
        End Sub
        
        Protected Overridable Sub OnCollectionChanged(ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (Me.RaiseCollectionChangedEvents = false) Then
                Return
            End If
            If (Not (Me.CollectionChangedEvent) Is Nothing) Then
                RaiseEvent CollectionChanged(Me, e)
            End If
            CodeFluent.Runtime.ServiceModel.CollectionChangeNotifier.Notify(Me, e, Me._h2943838991)
            Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("Count"))
            Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("Item[]"))
        End Sub
        
        Protected Overridable Sub Relate(ByVal item As S5T.IdUserClaim, ByVal relationType As CodeFluent.Runtime.CodeFluentRelationType)
            CType(Me,CodeFluent.Runtime.ICodeFluentSet).Relations(item) = relationType
        End Sub
        
        Public Function Add(ByVal idUserClaim As S5T.IdUserClaim) As Integer
            Dim localAdd As Integer = Me.BaseList.Count
            Me.BaseAdd(idUserClaim)
            Return localAdd
        End Function
        
        Protected Overridable Function BaseAdd(ByVal idUserClaim As S5T.IdUserClaim) As Integer
            If (idUserClaim Is Nothing) Then
                Throw New System.ArgumentNullException("idUserClaim")
            End If
            If (idUserClaim.Id = -1) Then
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "idUserClaim", "S5T.IdUserClaim")
            End If
            Try 
                Me.BaseTable.Add(idUserClaim.Id, idUserClaim)
            Catch ane As System.ArgumentNullException
                Throw New System.ArgumentNullException(S5T.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "S5T.IdUserClaimCollection", idUserClaim.EntityKey), ane)
            Catch ae As System.ArgumentException
                Throw New System.ArgumentException(S5T.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "S5T.IdUserClaimCollection", idUserClaim.Id), ae)
            End Try
            AddHandler idUserClaim.KeyChanged, AddressOf Me.OnItemKeyChanged
            If (Not (Me._claimsIdUserUser) Is Nothing) Then
                idUserClaim.User = Me._claimsIdUserUser
            End If
            Dim localAdd As Integer = Me.BaseList.Count
            Me.BaseList.Add(idUserClaim)
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Add, idUserClaim, localAdd))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemAdded, localAdd))
            Return localAdd
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_Collections_IList_Add(ByVal value As Object) As Integer Implements System.Collections.IList.Add
            Dim idUserClaim As S5T.IdUserClaim = Nothing
            Try 
                idUserClaim = CType(value,S5T.IdUserClaim)
            Catch icex As System.InvalidCastException
                idUserClaim = Nothing
                Dim key As String = Nothing
                Try 
                    key = CType(value,String)
                    Dim count As Integer = Me.Count
                    If (Not (Me.AddByEntityKey(key)) Is Nothing) Then
                        Return 1
                    End If
                    Return 0
                Catch icex1 As System.InvalidCastException
                    key = Nothing
                End Try
                If (key Is Nothing) Then
                    Throw New System.ArgumentException("value")
                End If
            End Try
            If (idUserClaim Is Nothing) Then
                Throw New System.ArgumentException("value")
            End If
            Dim localAdd As Integer = Me.Add(idUserClaim)
            Return localAdd
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_Generic_ICollection_S5T_IdUserClaim__Add(ByVal idUserClaim As S5T.IdUserClaim) Implements System.Collections.Generic.ICollection(Of S5T.IdUserClaim).Add
            Me.BaseAdd(idUserClaim)
        End Sub
        
        Public Overridable Function AddByEntityKey(ByVal key As String) As S5T.IdUserClaim
            Dim idUserClaim As S5T.IdUserClaim = S5T.IdUserClaim.LoadByEntityKey(key)
            If ((Not (idUserClaim) Is Nothing)  _
                        AndAlso (Me.Contains(idUserClaim) = false)) Then
                Me.Add(idUserClaim)
            End If
            Return idUserClaim
        End Function
        
        Public Overloads Sub Sort()
            Me.Sort(Nothing)
        End Sub
        
        Public Overloads Overridable Sub Sort(ByVal comparer As System.Collections.Generic.IComparer(Of S5T.IdUserClaim))
            Me.BaseList.Sort(comparer)
        End Sub
        
        Public Overloads Sub CopyTo(ByVal array() As S5T.IdUserClaim, ByVal index As Integer) Implements System.Collections.Generic.ICollection(Of S5T.IdUserClaim).CopyTo
            Me.BaseCopyTo(array, index)
        End Sub
        
        Protected Overridable Sub BaseCopyTo(ByVal array() As S5T.IdUserClaim, ByVal index As Integer)
            Me.BaseList.CopyTo(array, index)
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_ICollection_CopyTo(ByVal array As System.Array, ByVal index As Integer) Implements System.Collections.ICollection.CopyTo
            CodeFluent.Runtime.Utilities.ConvertUtilities.CopyTo(Me, array, index)
        End Sub
        
        Public Function Contains(ByVal idUserClaim As S5T.IdUserClaim) As Boolean Implements System.Collections.Generic.ICollection(Of S5T.IdUserClaim).Contains
            Dim localContains As Boolean = Me.BaseContains(idUserClaim)
            Return localContains
        End Function
        
        Protected Overridable Function BaseContains(ByVal idUserClaim As S5T.IdUserClaim) As Boolean
            If (idUserClaim Is Nothing) Then
                Return false
            End If
            Dim localContains As Boolean = Me.BaseTable.ContainsKey(idUserClaim.Id)
            Return localContains
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_Collections_IList_Contains(ByVal value As Object) As Boolean Implements System.Collections.IList.Contains
            Dim idUserClaim As S5T.IdUserClaim
            Try 
                idUserClaim = CType(value,S5T.IdUserClaim)
            Catch icex As System.InvalidCastException
                idUserClaim = Nothing
            End Try
            Return Me.Contains(idUserClaim)
        End Function
        
        Public Function IndexOf(ByVal idUserClaim As S5T.IdUserClaim) As Integer Implements System.Collections.Generic.IList(Of S5T.IdUserClaim).IndexOf
            Dim localIndexOf As Integer = Me.BaseIndexOf(idUserClaim)
            Return localIndexOf
        End Function
        
        Protected Overridable Function BaseIndexOf(ByVal idUserClaim As S5T.IdUserClaim) As Integer
            If (idUserClaim Is Nothing) Then
                Return -1
            End If
            Dim localIndexOf As Integer = Me.BaseList.IndexOf(idUserClaim)
            Return localIndexOf
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_Collections_IList_IndexOf(ByVal value As Object) As Integer Implements System.Collections.IList.IndexOf
            Dim idUserClaim As S5T.IdUserClaim
            Try 
                idUserClaim = CType(value,S5T.IdUserClaim)
            Catch icex As System.InvalidCastException
                idUserClaim = Nothing
            End Try
            Return Me.IndexOf(idUserClaim)
        End Function
        
        Public Overloads Sub Insert(ByVal index As Integer, ByVal idUserClaim As S5T.IdUserClaim) Implements System.Collections.Generic.IList(Of S5T.IdUserClaim).Insert
            Me.BaseInsert(index, idUserClaim)
        End Sub
        
        Protected Overridable Sub BaseInsert(ByVal index As Integer, ByVal idUserClaim As S5T.IdUserClaim)
            If (idUserClaim Is Nothing) Then
                Throw New System.ArgumentNullException("idUserClaim")
            End If
            Try 
                Me.BaseTable.Add(idUserClaim.Id, idUserClaim)
            Catch ane As System.ArgumentNullException
                Throw New System.ArgumentNullException(S5T.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "S5T.IdUserClaimCollection", idUserClaim.EntityKey), ane)
            Catch ae As System.ArgumentException
                Throw New System.ArgumentException(S5T.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "S5T.IdUserClaimCollection", idUserClaim.Id), ae)
            End Try
            Me.BaseList.Insert(index, idUserClaim)
            If (Not (Me._claimsIdUserUser) Is Nothing) Then
                idUserClaim.User = Me._claimsIdUserUser
            End If
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Add, idUserClaim, index))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemAdded, index))
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_IList_Insert(ByVal index As Integer, ByVal value As Object) Implements System.Collections.IList.Insert
            Dim idUserClaim As S5T.IdUserClaim
            Try 
                idUserClaim = CType(value,S5T.IdUserClaim)
            Catch icex As System.InvalidCastException
                idUserClaim = Nothing
            End Try
            Me.Insert(index, idUserClaim)
        End Sub
        
        Public Overridable Sub Clear() Implements System.Collections.Generic.ICollection(Of S5T.IdUserClaim).Clear
            Dim index As Integer
            Dim count As Integer = Me.Count
            index = 0
            Do While (index < count)
                Dim IdUserClaim As S5T.IdUserClaim = Me(0)
                Me.BaseRemove(IdUserClaim)
                index = (index + 1)
            Loop
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Refresh, Nothing))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.Reset, -1))
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_IList_Clear() Implements System.Collections.IList.Clear
            Me.Clear
        End Sub
        
        Public Function Remove(ByVal idUserClaim As S5T.IdUserClaim) As Boolean Implements System.Collections.Generic.ICollection(Of S5T.IdUserClaim).Remove
            Return Me.BaseRemove(idUserClaim)
        End Function
        
        Protected Overridable Function BaseRemove(ByVal idUserClaim As S5T.IdUserClaim) As Boolean
            If (idUserClaim Is Nothing) Then
                Throw New System.ArgumentNullException("idUserClaim")
            End If
            Dim index As Integer = Me.IndexOf(idUserClaim)
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(CType(CodeFluent.Runtime.Utilities.SortableBindingList(Of S5T.IdUserClaim).ListChangedTypeDeleting,System.ComponentModel.ListChangedType), index))
            Dim ret As Boolean
            ret = Me.BaseList.Remove(idUserClaim)
            RemoveHandler idUserClaim.KeyChanged, AddressOf Me.OnItemKeyChanged
            ret = Me.BaseTable.Remove(idUserClaim.Id)
            If (Not (Me._claimsIdUserUser) Is Nothing) Then
                idUserClaim.User = Nothing
            End If
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Remove, idUserClaim, index))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemDeleted, index))
            Return ret
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_IList_Remove(ByVal value As Object) Implements System.Collections.IList.Remove
            Dim idUserClaim As S5T.IdUserClaim
            Try 
                idUserClaim = CType(value,S5T.IdUserClaim)
            Catch icex As System.InvalidCastException
                idUserClaim = Nothing
            End Try
            Me.Remove(idUserClaim)
        End Sub
        
        Public Overridable Sub RemoveAt(ByVal index As Integer) Implements System.Collections.Generic.IList(Of S5T.IdUserClaim).RemoveAt
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(CType(CodeFluent.Runtime.Utilities.SortableBindingList(Of S5T.IdUserClaim).ListChangedTypeDeleting,System.ComponentModel.ListChangedType), index))
            Dim idUserClaim As S5T.IdUserClaim = Me.BaseList(index)
            If (Not (idUserClaim) Is Nothing) Then
                RemoveHandler idUserClaim.KeyChanged, AddressOf Me.OnItemKeyChanged
                Me.BaseTable.Remove(idUserClaim.Id)
            End If
            If (Not (Me._claimsIdUserUser) Is Nothing) Then
                idUserClaim.User = Nothing
            End If
            Me.BaseList.RemoveAt(index)
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Remove, idUserClaim, index))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemDeleted, index))
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_IList_RemoveAt(ByVal index As Integer) Implements System.Collections.IList.RemoveAt
            Me.RemoveAt(index)
        End Sub
        
        Public Overridable Function GetEnumerator() As System.Collections.Generic.IEnumerator(Of S5T.IdUserClaim) Implements System.Collections.Generic.IEnumerable(Of S5T.IdUserClaim).GetEnumerator
            Dim e As System.Collections.Generic.IEnumerator(Of S5T.IdUserClaim) = Me.BaseList.GetEnumerator
            Return e
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_Collections_IEnumerable_GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.BaseList.GetEnumerator
        End Function
        
        Private Function TryGetValue(ByVal key As Long) As S5T.IdUserClaim
            Dim idUserClaim As S5T.IdUserClaim = Nothing
            If (Me.BaseTable.TryGetValue(key, idUserClaim) = true) Then
                Return idUserClaim
            End If
            Return Nothing
        End Function
        
        Public Overridable Sub SaveAll()
            Dim index As Integer
            index = (Me.Count - 1)
            Do While (index >= 0)
                Dim idUserClaim As S5T.IdUserClaim = Me(index)
                idUserClaim.Save
                If (idUserClaim.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted) Then
                    Me.Remove(idUserClaim)
                End If
                index = (index - 1)
            Loop
        End Sub
        
        Private Overloads Sub LoadAll(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal reader As System.Data.IDataReader)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Me._claimsIdUserUser = Nothing
            Me.BaseList.Clear
            Me.BaseTable.Clear
            Dim count As Integer = 0
            Dim readCount As Integer = 0
            Dim readerRead As Boolean
            readerRead = reader.Read
            Do While ((readerRead = true)  _
                        AndAlso ((count < Me.MaxCount)  _
                        AndAlso (count < pageSize)))
                readCount = (readCount + 1)
                If (CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) = true) Then
                    Dim idUserClaim As S5T.IdUserClaim = New S5T.IdUserClaim()
                    CType(idUserClaim,CodeFluent.Runtime.ICodeFluentEntity).ReadRecord(reader)
                    If (Me.BaseContains(idUserClaim) = false) Then
                        Me.BaseAdd(idUserClaim)
                        count = (count + 1)
                    End If
                    idUserClaim.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                readerRead = reader.Read
            Loop
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadAll(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions) As S5T.IdUserClaimCollection
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim ret As S5T.IdUserClaimCollection = New S5T.IdUserClaimCollection()
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = S5T.IdUserClaimCollection.PageDataLoadAll(pageOptions)
                If (reader Is Nothing) Then
                    Return ret
                End If
                ret.LoadAll(pageIndex, pageSize, pageOptions, reader)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(S5T.Constants.S5TStoreName)
            End Try
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function LoadAll() As S5T.IdUserClaimCollection
            Dim ret As S5T.IdUserClaimCollection = S5T.IdUserClaimCollection.PageLoadAll(Integer.MinValue, Integer.MaxValue, Nothing)
            Return ret
        End Function
        
        Public Shared Function PageDataLoadAll(ByVal pageOptions As CodeFluent.Runtime.PageOptions) As System.Data.IDataReader
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUserClaim", "LoadAll")
            If (Not (pageOptions) Is Nothing) Then
                Dim enumerator As System.Collections.IEnumerator = pageOptions.OrderByArguments.GetEnumerator
                Dim b As Boolean
                Dim index As Integer = 0
                b = enumerator.MoveNext
                Do While b
                    Dim argument As CodeFluent.Runtime.OrderByArgument = CType(enumerator.Current,CodeFluent.Runtime.OrderByArgument)
                    persistence.AddParameter(String.Format("@_orderBy{0}", index), argument.Name)
                    persistence.AddParameter(String.Format("@_orderByDirection{0}", index), CType(argument.Direction,Integer))
                    index = (index + 1)
                    b = enumerator.MoveNext
                Loop
            End If
            Dim reader As System.Data.IDataReader = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence.ExecuteReader
            Return reader
        End Function
        
        Public Shared Function DataLoadAll() As System.Data.IDataReader
            Dim reader As System.Data.IDataReader = S5T.IdUserClaimCollection.PageDataLoadAll(Nothing)
            Return reader
        End Function
        
        Private Overloads Sub LoadByUser(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal reader As System.Data.IDataReader, ByVal user As S5T.IdUser)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim idUserState As CodeFluent.Runtime.CodeFluentEntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
            If (Not (user) Is Nothing) Then
                idUserState = user.EntityState
            End If
            Me._claimsIdUserUser = user
            Me.BaseList.Clear
            Me.BaseTable.Clear
            Dim count As Integer = 0
            Dim readCount As Integer = 0
            Dim readerRead As Boolean
            readerRead = reader.Read
            Do While ((readerRead = true)  _
                        AndAlso ((count < Me.MaxCount)  _
                        AndAlso (count < pageSize)))
                readCount = (readCount + 1)
                If (CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) = true) Then
                    Dim idUserClaim As S5T.IdUserClaim = New S5T.IdUserClaim()
                    CType(idUserClaim,CodeFluent.Runtime.ICodeFluentEntity).ReadRecord(reader)
                    If (Me.BaseContains(idUserClaim) = false) Then
                        Me.BaseAdd(idUserClaim)
                        count = (count + 1)
                    End If
                    idUserClaim.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                readerRead = reader.Read
            Loop
            If (Not (user) Is Nothing) Then
                user.EntityState = idUserState
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadByUser(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal user As S5T.IdUser) As S5T.IdUserClaimCollection
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim ret As S5T.IdUserClaimCollection = New S5T.IdUserClaimCollection()
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = S5T.IdUserClaimCollection.PageDataLoadByUser(pageOptions, user)
                If (reader Is Nothing) Then
                    Return ret
                End If
                ret.LoadByUser(pageIndex, pageSize, pageOptions, reader, user)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(S5T.Constants.S5TStoreName)
            End Try
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function LoadByUser(ByVal user As S5T.IdUser) As S5T.IdUserClaimCollection
            Dim ret As S5T.IdUserClaimCollection = S5T.IdUserClaimCollection.PageLoadByUser(Integer.MinValue, Integer.MaxValue, Nothing, user)
            Return ret
        End Function
        
        Public Shared Function PageDataLoadByUser(ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal user As S5T.IdUser) As System.Data.IDataReader
            If (user Is Nothing) Then
                Return Nothing
            End If
            If (user.Id = -1) Then
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "user", "S5T.IdUser")
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUserClaim", "LoadByUser")
            persistence.AddParameter("@UserId", user.Id, CType(-1,Long))
            If (Not (pageOptions) Is Nothing) Then
                Dim enumerator As System.Collections.IEnumerator = pageOptions.OrderByArguments.GetEnumerator
                Dim b As Boolean
                Dim index As Integer = 0
                b = enumerator.MoveNext
                Do While b
                    Dim argument As CodeFluent.Runtime.OrderByArgument = CType(enumerator.Current,CodeFluent.Runtime.OrderByArgument)
                    persistence.AddParameter(String.Format("@_orderBy{0}", index), argument.Name)
                    persistence.AddParameter(String.Format("@_orderByDirection{0}", index), CType(argument.Direction,Integer))
                    index = (index + 1)
                    b = enumerator.MoveNext
                Loop
            End If
            Dim reader As System.Data.IDataReader = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence.ExecuteReader
            Return reader
        End Function
        
        Public Shared Function DataLoadByUser(ByVal user As S5T.IdUser) As System.Data.IDataReader
            Dim reader As System.Data.IDataReader = S5T.IdUserClaimCollection.PageDataLoadByUser(Nothing, user)
            Return reader
        End Function
        
        Public Shared Function DeleteByClaim(ByVal type As String, ByVal value As String) As Integer
            If (type Is CType(Nothing, String)) Then
                Throw New System.ArgumentNullException("type")
            End If
            If (value Is CType(Nothing, String)) Then
                Throw New System.ArgumentNullException("value")
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUserClaim", "DeleteByClaim")
            persistence.AddParameter("@Type", type, CType(Nothing, String))
            persistence.AddParameter("@Value", value, CType(Nothing, String))
            Dim count As Integer
            count = persistence.ExecuteScalar(-1)
            Return count
        End Function
        
        Private Overloads Sub LoadByClaim(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal reader As System.Data.IDataReader, ByVal type As String, ByVal value As String)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Me._claimsIdUserUser = Nothing
            Me.BaseList.Clear
            Me.BaseTable.Clear
            Dim count As Integer = 0
            Dim readCount As Integer = 0
            Dim readerRead As Boolean
            readerRead = reader.Read
            Do While ((readerRead = true)  _
                        AndAlso ((count < Me.MaxCount)  _
                        AndAlso (count < pageSize)))
                readCount = (readCount + 1)
                If (CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) = true) Then
                    Dim idUserClaim As S5T.IdUserClaim = New S5T.IdUserClaim()
                    CType(idUserClaim,CodeFluent.Runtime.ICodeFluentEntity).ReadRecord(reader)
                    If (Me.BaseContains(idUserClaim) = false) Then
                        Me.BaseAdd(idUserClaim)
                        count = (count + 1)
                    End If
                    idUserClaim.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                readerRead = reader.Read
            Loop
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadByClaim(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal type As String, ByVal value As String) As S5T.IdUserClaimCollection
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim ret As S5T.IdUserClaimCollection = New S5T.IdUserClaimCollection()
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = S5T.IdUserClaimCollection.PageDataLoadByClaim(pageOptions, type, value)
                If (reader Is Nothing) Then
                    Return ret
                End If
                ret.LoadByClaim(pageIndex, pageSize, pageOptions, reader, type, value)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(S5T.Constants.S5TStoreName)
            End Try
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function LoadByClaim(ByVal type As String, ByVal value As String) As S5T.IdUserClaimCollection
            Dim ret As S5T.IdUserClaimCollection = S5T.IdUserClaimCollection.PageLoadByClaim(Integer.MinValue, Integer.MaxValue, Nothing, type, value)
            Return ret
        End Function
        
        Public Shared Function PageDataLoadByClaim(ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal type As String, ByVal value As String) As System.Data.IDataReader
            If (type Is CType(Nothing, String)) Then
                Throw New System.ArgumentNullException("type")
            End If
            If (value Is CType(Nothing, String)) Then
                Throw New System.ArgumentNullException("value")
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "IdUserClaim", "LoadByClaim")
            persistence.AddParameter("@Type", type, CType(Nothing, String))
            persistence.AddParameter("@Value", value, CType(Nothing, String))
            If (Not (pageOptions) Is Nothing) Then
                Dim enumerator As System.Collections.IEnumerator = pageOptions.OrderByArguments.GetEnumerator
                Dim b As Boolean
                Dim index As Integer = 0
                b = enumerator.MoveNext
                Do While b
                    Dim argument As CodeFluent.Runtime.OrderByArgument = CType(enumerator.Current,CodeFluent.Runtime.OrderByArgument)
                    persistence.AddParameter(String.Format("@_orderBy{0}", index), argument.Name)
                    persistence.AddParameter(String.Format("@_orderByDirection{0}", index), CType(argument.Direction,Integer))
                    index = (index + 1)
                    b = enumerator.MoveNext
                Loop
            End If
            Dim reader As System.Data.IDataReader = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence.ExecuteReader
            Return reader
        End Function
        
        Public Shared Function DataLoadByClaim(ByVal type As String, ByVal value As String) As System.Data.IDataReader
            Dim reader As System.Data.IDataReader = S5T.IdUserClaimCollection.PageDataLoadByClaim(Nothing, type, value)
            Return reader
        End Function
        
        Protected Overridable Sub BaseTrace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter)
            writer.Write("[")
            writer.Write(String.Concat("Count=", Me.Count))
            writer.Write("]")
        End Sub
        
        Public Function Trace() As String
            Dim stringBuilder As System.Text.StringBuilder = New System.Text.StringBuilder()
            Dim stringWriter As System.IO.StringWriter = New System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture)
            Dim writer As System.CodeDom.Compiler.IndentedTextWriter = New System.CodeDom.Compiler.IndentedTextWriter(stringWriter)
            Me.BaseTrace(writer)
            writer.Flush
            CType(writer,System.IDisposable).Dispose
            CType(stringWriter,System.IDisposable).Dispose
            Dim sr As String = stringBuilder.ToString
            Return sr
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub CodeFluent_Runtime_ICodeFluentObject_Trace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter) Implements CodeFluent.Runtime.ICodeFluentObject.Trace
            Me.BaseTrace(writer)
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal collection As S5T.IdUserClaimCollection, ByVal deep As Boolean)
            If (GetType(System.ICloneable).IsAssignableFrom(GetType(S5T.IdUserClaim)) = false) Then
                deep = false
            End If
            Dim enumerator As System.Collections.Generic.IEnumerator(Of S5T.IdUserClaim) = Me.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                If (deep = true) Then
                    collection.Add(CType(CType(enumerator.Current,System.ICloneable).Clone,S5T.IdUserClaim))
                Else
                    collection.Add(enumerator.Current)
                End If
                b = enumerator.MoveNext
            Loop
        End Sub
        
        Public Overridable Function Clone(ByVal deep As Boolean) As S5T.IdUserClaimCollection
            Dim ret As S5T.IdUserClaimCollection = New S5T.IdUserClaimCollection()
            Me.CopyTo(ret, deep)
            Return ret
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_ICloneable_Clone() As Object Implements System.ICloneable.Clone
            Return Me.Clone(true)
        End Function
        
        Public Overridable Sub CancelNew(ByVal index As Integer) Implements System.ComponentModel.ICancelAddNew.CancelNew
            If ((Me._addNewPos >= 0)  _
                        AndAlso (Me._addNewPos = index)) Then
                Me.RemoveAt(index)
                Me._addNewPos = -1
            End If
        End Sub
        
        Public Overridable Sub EndNew(ByVal index As Integer) Implements System.ComponentModel.ICancelAddNew.EndNew
            If ((Me._addNewPos >= 0)  _
                        AndAlso (Me._addNewPos = index)) Then
                Me._addNewPos = -1
            End If
        End Sub
        
        Private Sub AddIndex(ByVal [property] As System.ComponentModel.PropertyDescriptor) Implements System.ComponentModel.IBindingList.AddIndex
            Me._blm2492310655.AddIndex([property])
        End Sub
        
        Protected Overridable Sub OnAddingNew(ByVal e As System.ComponentModel.AddingNewEventArgs)
            If (Not (Me.AddingNewEvent) Is Nothing) Then
                RaiseEvent AddingNew(Me, e)
            End If
        End Sub
        
        Private Function AddNew() As Object Implements System.ComponentModel.IBindingList.AddNew
            Dim add As S5T.IdUserClaim = New S5T.IdUserClaim()
            Dim e As System.ComponentModel.AddingNewEventArgs = New System.ComponentModel.AddingNewEventArgs(add)
            Me.OnAddingNew(e)
            add = CType(e.NewObject,S5T.IdUserClaim)
            If (add Is Nothing) Then
                add = New S5T.IdUserClaim()
            End If
            add.Id = 0
            Me._addNewPos = Me.Add(add)
            Return add
        End Function
        
        Private Sub ApplySort(ByVal [property] As System.ComponentModel.PropertyDescriptor, ByVal direction As System.ComponentModel.ListSortDirection) Implements System.ComponentModel.IBindingList.ApplySort
            Me._blm2492310655.ApplySort([property], direction)
        End Sub
        
        Private Function Find(ByVal [property] As System.ComponentModel.PropertyDescriptor, ByVal key As Object) As Integer Implements System.ComponentModel.IBindingList.Find
            Return Me._blm2492310655.Find([property], key)
        End Function
        
        Private Sub RemoveIndex(ByVal [property] As System.ComponentModel.PropertyDescriptor) Implements System.ComponentModel.IBindingList.RemoveIndex
            Me._blm2492310655.RemoveIndex([property])
        End Sub
        
        Private Sub RemoveSort() Implements System.ComponentModel.IBindingList.RemoveSort
            Me._blm2492310655.RemoveSort
        End Sub
        
        Protected Overridable Sub OnListChanged(ByVal e As System.ComponentModel.ListChangedEventArgs)
            If (e Is Nothing) Then
                Throw New System.ArgumentNullException("e")
            End If
            If (Me.RaiseListChangedEvents = false) Then
                Return
            End If
            If (((e.ListChangedType = System.ComponentModel.ListChangedType.Reset)  _
                        = false)  _
                        AndAlso (e.NewIndex < 0)) Then
                Return
            End If
            If (Not (Me.ListChangedEvent) Is Nothing) Then
                RaiseEvent ListChanged(Me, e)
            End If
        End Sub
        
        Public Sub AddRange(ByVal collection As System.Collections.Generic.IEnumerable(Of S5T.IdUserClaim))
            CodeFluent.Runtime.Utilities.ConvertUtilities.AddRange(Me, collection)
        End Sub
        
        Private Sub OnItemKeyChanged(ByVal sender As Object, ByVal e As CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of Long))
            If (e Is Nothing) Then
                Throw New System.ArgumentNullException("e")
            End If
            Dim existing As S5T.IdUserClaim = Nothing
            If (Me.BaseTable.TryGetValue(e.OldKey, existing) = false) Then
                Return
            End If
            If ((Not (sender) Is Nothing)  _
                        AndAlso (GetType(CodeFluent.Runtime.Utilities.IKeyable(Of Long)).IsAssignableFrom(sender.GetType) = true)) Then
                Dim item As CodeFluent.Runtime.Utilities.IKeyable(Of Long) = CType(sender,CodeFluent.Runtime.Utilities.IKeyable(Of Long))
                Try 
                    Me.BaseTable.Add(item.Key, existing)
                Catch ane As System.ArgumentNullException
                    Throw New System.ArgumentNullException(S5T.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "S5T.IdUserClaimCollection", CType(item,CodeFluent.Runtime.ICodeFluentEntity).EntityKey), ane)
                Catch ae As System.ArgumentException
                    Throw New System.ArgumentException(S5T.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "S5T.IdUserClaimCollection", item.Key), ae)
                End Try
                Me.BaseTable.Remove(e.OldKey)
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadAll(ByVal pageIndex As Integer, ByVal pageSize As Integer) As S5T.IdUserClaimCollection
            Return S5T.IdUserClaimCollection.PageLoadAll(pageIndex, pageSize, Nothing)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadByUser(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal userId As Long) As S5T.IdUserClaimCollection
            Dim idUser As S5T.IdUser = S5T.IdUser.Load(userId)
            If (idUser Is Nothing) Then
                Return New S5T.IdUserClaimCollection()
            End If
            Return S5T.IdUserClaimCollection.PageLoadByUser(pageIndex, pageSize, Nothing, idUser)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadByClaim(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal type As String, ByVal value As String) As S5T.IdUserClaimCollection
            Return S5T.IdUserClaimCollection.PageLoadByClaim(pageIndex, pageSize, Nothing, type, value)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Shared Function Save(ByVal idUserClaim As S5T.IdUserClaim) As Boolean
            If (idUserClaim Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = idUserClaim.Save
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Shared Function Insert(ByVal idUserClaim As S5T.IdUserClaim) As Boolean
            Dim ret As Boolean = S5T.IdUserClaim.Save(idUserClaim)
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Shared Function Delete(ByVal idUserClaim As S5T.IdUserClaim) As Boolean
            If (idUserClaim Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = idUserClaim.Delete
            Return ret
        End Function
    End Class
End Namespace
