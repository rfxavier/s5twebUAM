'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace S5T.Web.Security
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: .
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.01234.05678")>  _
    Partial Public Class UserStore
        Implements Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser), Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserPasswordStore(Of S5T.IdUser), Microsoft.AspNet.Identity.IUserPasswordStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserSecurityStampStore(Of S5T.IdUser), Microsoft.AspNet.Identity.IUserSecurityStampStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, String), Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser), Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserTwoFactorStore(Of S5T.IdUser, String), Microsoft.AspNet.Identity.IUserTwoFactorStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser), Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser), Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser), Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser, Long), Microsoft.AspNet.Identity.IUserClaimStore(Of S5T.IdUser), Microsoft.AspNet.Identity.IUserClaimStore(Of S5T.IdUser, Long), System.IDisposable
        
        Private _disposed As Boolean = false
        
        Public Overloads Overridable Function CreateAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser).CreateAsync , Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser, Long).CreateAsync
            Return Me.CreateAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function CreateAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.CreationDateUTC = Date.UtcNow
            user.Save
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function UpdateAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser).UpdateAsync , Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser, Long).UpdateAsync
            Return Me.UpdateAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function UpdateAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.LastProfileUpdateDate = Date.UtcNow
            user.Save
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function DeleteAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser).DeleteAsync , Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser, Long).DeleteAsync
            Return Me.DeleteAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function DeleteAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.Delete
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function FindByIdAsync(ByVal userId As String) As System.Threading.Tasks.Task(Of S5T.IdUser) Implements Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser).FindByIdAsync
            Return Me.FindByIdAsync(userId, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function FindByIdAsync(ByVal userId As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of S5T.IdUser)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            Return System.Threading.Tasks.Task.FromResult(S5T.IdUser.LoadByEntityKey(userId))
        End Function
        
        Public Overloads Overridable Function FindByIdAsync(ByVal userId As Long) As System.Threading.Tasks.Task(Of S5T.IdUser) Implements Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser, Long).FindByIdAsync
            Return Me.FindByIdAsync(userId, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function FindByIdAsync(ByVal userId As Long, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of S5T.IdUser)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            Return System.Threading.Tasks.Task.FromResult(S5T.IdUser.Load(userId))
        End Function
        
        Public Overloads Overridable Function FindByNameAsync(ByVal userName As String) As System.Threading.Tasks.Task(Of S5T.IdUser) Implements Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser).FindByNameAsync , Microsoft.AspNet.Identity.IUserStore(Of S5T.IdUser, Long).FindByNameAsync
            Return Me.FindByNameAsync(userName, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function FindByNameAsync(ByVal userName As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of S5T.IdUser)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            Return System.Threading.Tasks.Task.FromResult(S5T.IdUser.LoadByUserName(userName))
        End Function
        
        Public Overloads Overridable Function HasPasswordAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of Boolean) Implements Microsoft.AspNet.Identity.IUserPasswordStore(Of S5T.IdUser).HasPasswordAsync , Microsoft.AspNet.Identity.IUserPasswordStore(Of S5T.IdUser, Long).HasPasswordAsync
            Return Me.HasPasswordAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function HasPasswordAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of Boolean)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult((Not (user.Password) Is Nothing))
        End Function
        
        Public Overloads Overridable Function GetPasswordHashAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of String) Implements Microsoft.AspNet.Identity.IUserPasswordStore(Of S5T.IdUser).GetPasswordHashAsync , Microsoft.AspNet.Identity.IUserPasswordStore(Of S5T.IdUser, Long).GetPasswordHashAsync
            Return Me.GetPasswordHashAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetPasswordHashAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of String)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.Password)
        End Function
        
        Public Overloads Overridable Function SetPasswordHashAsync(ByVal user As S5T.IdUser, ByVal passwordHash As String) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserPasswordStore(Of S5T.IdUser).SetPasswordHashAsync , Microsoft.AspNet.Identity.IUserPasswordStore(Of S5T.IdUser, Long).SetPasswordHashAsync
            Return Me.SetPasswordHashAsync(user, passwordHash, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetPasswordHashAsync(ByVal user As S5T.IdUser, ByVal passwordHash As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.Password = passwordHash
            user.LastPasswordChangeDate = Date.UtcNow
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetSecurityStampAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of String) Implements Microsoft.AspNet.Identity.IUserSecurityStampStore(Of S5T.IdUser).GetSecurityStampAsync , Microsoft.AspNet.Identity.IUserSecurityStampStore(Of S5T.IdUser, Long).GetSecurityStampAsync
            Return Me.GetSecurityStampAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetSecurityStampAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of String)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.SecurityStamp)
        End Function
        
        Public Overloads Overridable Function SetSecurityStampAsync(ByVal user As S5T.IdUser, ByVal stamp As String) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserSecurityStampStore(Of S5T.IdUser).SetSecurityStampAsync , Microsoft.AspNet.Identity.IUserSecurityStampStore(Of S5T.IdUser, Long).SetSecurityStampAsync
            Return Me.SetSecurityStampAsync(user, stamp, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetSecurityStampAsync(ByVal user As S5T.IdUser, ByVal stamp As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.SecurityStamp = stamp
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetLockoutEndDateAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of System.DateTimeOffset) Implements Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, String).GetLockoutEndDateAsync , Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, Long).GetLockoutEndDateAsync
            Return Me.GetLockoutEndDateAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetLockoutEndDateAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of System.DateTimeOffset)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            If user.LockoutEndDateUtc.HasValue Then
                Return System.Threading.Tasks.Task.FromResult(New System.DateTimeOffset(Date.SpecifyKind(user.LockoutEndDateUtc.Value, System.DateTimeKind.Utc)))
            Else
                Return System.Threading.Tasks.Task.FromResult(New System.DateTimeOffset())
            End If
        End Function
        
        Public Overloads Overridable Function SetLockoutEndDateAsync(ByVal user As S5T.IdUser, ByVal lockoutEnd As System.DateTimeOffset) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, String).SetLockoutEndDateAsync , Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, Long).SetLockoutEndDateAsync
            Return Me.SetLockoutEndDateAsync(user, lockoutEnd, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetLockoutEndDateAsync(ByVal user As S5T.IdUser, ByVal lockoutEnd As System.DateTimeOffset, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.LockoutEndDateUtc = lockoutEnd.UtcDateTime
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function IncrementAccessFailedCountAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of Integer) Implements Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, String).IncrementAccessFailedCountAsync , Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, Long).IncrementAccessFailedCountAsync
            Return Me.IncrementAccessFailedCountAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function IncrementAccessFailedCountAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of Integer)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            If (user.AccessFailedCount <= 0) Then
                user.AccessFailedCount = 1
            Else
                user.AccessFailedCount = (user.AccessFailedCount + 1)
            End If
            If (user.AccessFailedCount = 1) Then
                user.AccessFailedWindowStart = Date.UtcNow
            End If
            Return System.Threading.Tasks.Task.FromResult(user.AccessFailedCount)
        End Function
        
        Public Overloads Overridable Function ResetAccessFailedCountAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, String).ResetAccessFailedCountAsync , Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, Long).ResetAccessFailedCountAsync
            Return Me.ResetAccessFailedCountAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function ResetAccessFailedCountAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.AccessFailedCount = 0
            Return System.Threading.Tasks.Task.FromResult(user.AccessFailedCount)
        End Function
        
        Public Overloads Overridable Function GetAccessFailedCountAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of Integer) Implements Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, String).GetAccessFailedCountAsync , Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, Long).GetAccessFailedCountAsync
            Return Me.GetAccessFailedCountAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetAccessFailedCountAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of Integer)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.AccessFailedCount)
        End Function
        
        Public Overloads Overridable Function GetLockoutEnabledAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of Boolean) Implements Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, String).GetLockoutEnabledAsync , Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, Long).GetLockoutEnabledAsync
            Return Me.GetLockoutEnabledAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetLockoutEnabledAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of Boolean)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.LockoutEnabled)
        End Function
        
        Public Overloads Overridable Function SetLockoutEnabledAsync(ByVal user As S5T.IdUser, ByVal enabled As Boolean) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, String).SetLockoutEnabledAsync , Microsoft.AspNet.Identity.IUserLockoutStore(Of S5T.IdUser, Long).SetLockoutEnabledAsync
            Return Me.SetLockoutEnabledAsync(user, enabled, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetLockoutEnabledAsync(ByVal user As S5T.IdUser, ByVal enabled As Boolean, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.LockoutEnabled = enabled
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetPhoneNumberConfirmedAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of Boolean) Implements Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser, String).GetPhoneNumberConfirmedAsync , Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser, Long).GetPhoneNumberConfirmedAsync
            Return Me.GetPhoneNumberConfirmedAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetPhoneNumberConfirmedAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of Boolean)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.PhoneNumberConfirmed)
        End Function
        
        Public Overloads Overridable Function SetPhoneNumberConfirmedAsync(ByVal user As S5T.IdUser, ByVal confirmed As Boolean) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser).SetPhoneNumberConfirmedAsync , Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser, Long).SetPhoneNumberConfirmedAsync
            Return Me.SetPhoneNumberConfirmedAsync(user, confirmed, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetPhoneNumberConfirmedAsync(ByVal user As S5T.IdUser, ByVal confirmed As Boolean, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.PhoneNumberConfirmed = confirmed
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetPhoneNumberAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of String) Implements Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser).GetPhoneNumberAsync , Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser, Long).GetPhoneNumberAsync
            Return Me.GetPhoneNumberAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetPhoneNumberAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of String)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.PhoneNumber)
        End Function
        
        Public Overloads Overridable Function SetPhoneNumberAsync(ByVal user As S5T.IdUser, ByVal phoneNumber As String) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser).SetPhoneNumberAsync , Microsoft.AspNet.Identity.IUserPhoneNumberStore(Of S5T.IdUser, Long).SetPhoneNumberAsync
            Return Me.SetPhoneNumberAsync(user, phoneNumber, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetPhoneNumberAsync(ByVal user As S5T.IdUser, ByVal phoneNumber As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.PhoneNumber = phoneNumber
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetTwoFactorEnabledAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of Boolean) Implements Microsoft.AspNet.Identity.IUserTwoFactorStore(Of S5T.IdUser, String).GetTwoFactorEnabledAsync , Microsoft.AspNet.Identity.IUserTwoFactorStore(Of S5T.IdUser, Long).GetTwoFactorEnabledAsync
            Return Me.GetTwoFactorEnabledAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetTwoFactorEnabledAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of Boolean)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.TwoFactorEnabled)
        End Function
        
        Public Overloads Overridable Function SetTwoFactorEnabledAsync(ByVal user As S5T.IdUser, ByVal enabled As Boolean) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserTwoFactorStore(Of S5T.IdUser, String).SetTwoFactorEnabledAsync , Microsoft.AspNet.Identity.IUserTwoFactorStore(Of S5T.IdUser, Long).SetTwoFactorEnabledAsync
            Return Me.SetTwoFactorEnabledAsync(user, enabled, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetTwoFactorEnabledAsync(ByVal user As S5T.IdUser, ByVal enabled As Boolean, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.TwoFactorEnabled = enabled
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetEmailAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of String) Implements Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, String).GetEmailAsync , Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, Long).GetEmailAsync
            Return Me.GetEmailAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetEmailAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of String)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.Email)
        End Function
        
        Public Overloads Overridable Function SetEmailAsync(ByVal user As S5T.IdUser, ByVal email As String) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, String).SetEmailAsync , Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, Long).SetEmailAsync
            Return Me.SetEmailAsync(user, email, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetEmailAsync(ByVal user As S5T.IdUser, ByVal email As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.Email = email
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetEmailConfirmedAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of Boolean) Implements Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, String).GetEmailConfirmedAsync , Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, Long).GetEmailConfirmedAsync
            Return Me.GetEmailConfirmedAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetEmailConfirmedAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of Boolean)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Return System.Threading.Tasks.Task.FromResult(user.EmailConfirmed)
        End Function
        
        Public Overloads Overridable Function SetEmailConfirmedAsync(ByVal user As S5T.IdUser, ByVal confirmed As Boolean) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, String).SetEmailConfirmedAsync , Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, Long).SetEmailConfirmedAsync
            Return Me.SetEmailConfirmedAsync(user, confirmed, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function SetEmailConfirmedAsync(ByVal user As S5T.IdUser, ByVal confirmed As Boolean, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            user.EmailConfirmed = confirmed
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function FindByEmailAsync(ByVal email As String) As System.Threading.Tasks.Task(Of S5T.IdUser) Implements Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, String).FindByEmailAsync , Microsoft.AspNet.Identity.IUserEmailStore(Of S5T.IdUser, Long).FindByEmailAsync
            Return Me.FindByEmailAsync(email, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function FindByEmailAsync(ByVal email As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of S5T.IdUser)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            Return System.Threading.Tasks.Task.FromResult(S5T.IdUser.LoadByEmail(email))
        End Function
        
        Public Overloads Overridable Function AddToRoleAsync(ByVal user As S5T.IdUser, ByVal roleName As String) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser).AddToRoleAsync , Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser, Long).AddToRoleAsync
            Return Me.AddToRoleAsync(user, roleName, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function AddToRoleAsync(ByVal user As S5T.IdUser, ByVal roleName As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Dim role As S5T.IdRole = S5T.IdRole.LoadByName(roleName)
            If (role Is Nothing) Then
                Throw New System.ArgumentException(String.Format("Role '{0}' does not exist.", roleName))
            End If
            user.Roles.Add(role)
            user.SaveRolesRelations
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function RemoveFromRoleAsync(ByVal user As S5T.IdUser, ByVal roleName As String) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser).RemoveFromRoleAsync , Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser, Long).RemoveFromRoleAsync
            Return Me.RemoveFromRoleAsync(user, roleName, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function RemoveFromRoleAsync(ByVal user As S5T.IdUser, ByVal roleName As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Dim role As S5T.IdRole = S5T.IdRole.LoadByName(roleName)
            If (role Is Nothing) Then
                Throw New System.ArgumentException(String.Format("Role '{0}' does not exist.", roleName))
            End If
            user.Roles.Remove(role)
            user.SaveRolesRelations
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetRolesAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of String)) Implements Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser).GetRolesAsync , Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser, Long).GetRolesAsync
            Return Me.GetRolesAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetRolesAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of String))
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Dim roleNames As System.Collections.Generic.IList(Of String) = New System.Collections.Generic.List(Of String)()
            Dim enumerator As System.Collections.Generic.IEnumerator(Of S5T.IdRole) = user.Roles.GetEnumerator
            Do While enumerator.MoveNext
                roleNames.Add(enumerator.Current.Name)

            Loop
            Return System.Threading.Tasks.Task.FromResult(roleNames)
        End Function
        
        Public Overloads Overridable Function IsInRoleAsync(ByVal user As S5T.IdUser, ByVal roleName As String) As System.Threading.Tasks.Task(Of Boolean) Implements Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser).IsInRoleAsync , Microsoft.AspNet.Identity.IUserRoleStore(Of S5T.IdUser, Long).IsInRoleAsync
            Return Me.IsInRoleAsync(user, roleName, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function IsInRoleAsync(ByVal user As S5T.IdUser, ByVal roleName As String, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of Boolean)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Dim role As S5T.IdRole = S5T.IdRole.LoadByName(roleName)
            If (role Is Nothing) Then
                Throw New System.ArgumentException(String.Format("Role '{0}' does not exist.", roleName))
            End If
            Dim result As Boolean = user.Roles.Contains(role)
            Return System.Threading.Tasks.Task.FromResult(result)
        End Function
        
        Public Overloads Overridable Function AddLoginAsync(ByVal user As S5T.IdUser, ByVal userLoginInfo As Microsoft.AspNet.Identity.UserLoginInfo) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser).AddLoginAsync , Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser, Long).AddLoginAsync
            Return Me.AddLoginAsync(user, userLoginInfo, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function AddLoginAsync(ByVal user As S5T.IdUser, ByVal userLoginInfo As Microsoft.AspNet.Identity.UserLoginInfo, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            If (userLoginInfo Is Nothing) Then
                Throw New System.ArgumentNullException("userLoginInfo")
            End If
            Dim login As S5T.IdUserLogin = New S5T.IdUserLogin()
            login.User = user
            login.ProviderKey = userLoginInfo.ProviderKey
            login.ProviderName = userLoginInfo.LoginProvider
            login.Save
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function RemoveLoginAsync(ByVal user As S5T.IdUser, ByVal userLoginInfo As Microsoft.AspNet.Identity.UserLoginInfo) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser).RemoveLoginAsync , Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser, Long).RemoveLoginAsync
            Return Me.RemoveLoginAsync(user, userLoginInfo, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function RemoveLoginAsync(ByVal user As S5T.IdUser, ByVal userLoginInfo As Microsoft.AspNet.Identity.UserLoginInfo, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            If (userLoginInfo Is Nothing) Then
                Throw New System.ArgumentNullException("userLoginInfo")
            End If
            S5T.IdUserLoginCollection.DeleteByUserLoginInfo(user, userLoginInfo.ProviderKey, userLoginInfo.LoginProvider)
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetLoginsAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Microsoft.AspNet.Identity.UserLoginInfo)) Implements Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser).GetLoginsAsync , Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser, Long).GetLoginsAsync
            Return Me.GetLoginsAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetLoginsAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Microsoft.AspNet.Identity.UserLoginInfo))
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Dim result As System.Collections.Generic.IList(Of Microsoft.AspNet.Identity.UserLoginInfo) = New System.Collections.Generic.List(Of Microsoft.AspNet.Identity.UserLoginInfo)()
            Dim enumerator As System.Collections.Generic.IEnumerator(Of S5T.IdUserLogin) = user.Logins.GetEnumerator
            Do While enumerator.MoveNext
                Dim userLogin As S5T.IdUserLogin = enumerator.Current
                result.Add(New Microsoft.AspNet.Identity.UserLoginInfo(userLogin.ProviderName, userLogin.ProviderKey))

            Loop
            Return System.Threading.Tasks.Task.FromResult(result)
        End Function
        
        Public Overloads Overridable Function FindAsync(ByVal userLoginInfo As Microsoft.AspNet.Identity.UserLoginInfo) As System.Threading.Tasks.Task(Of S5T.IdUser) Implements Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser).FindAsync , Microsoft.AspNet.Identity.IUserLoginStore(Of S5T.IdUser, Long).FindAsync
            Return Me.FindAsync(userLoginInfo, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function FindAsync(ByVal userLoginInfo As Microsoft.AspNet.Identity.UserLoginInfo, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of S5T.IdUser)
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            Return System.Threading.Tasks.Task.FromResult(S5T.IdUser.LoadByUserLoginInfo(userLoginInfo.ProviderKey, userLoginInfo.LoginProvider))
        End Function
        
        Public Overloads Overridable Function AddClaimAsync(ByVal user As S5T.IdUser, ByVal claim As System.Security.Claims.Claim) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserClaimStore(Of S5T.IdUser).AddClaimAsync , Microsoft.AspNet.Identity.IUserClaimStore(Of S5T.IdUser, Long).AddClaimAsync
            Return Me.AddClaimAsync(user, claim, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function AddClaimAsync(ByVal user As S5T.IdUser, ByVal claim As System.Security.Claims.Claim, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            If (claim Is Nothing) Then
                Throw New System.ArgumentNullException("claim")
            End If
            Dim userClaim As S5T.IdUserClaim = New S5T.IdUserClaim()
            userClaim.User = user
            userClaim.Type = claim.Type
            userClaim.Value = claim.Value
            userClaim.Issuer = claim.Issuer
            userClaim.OriginalIssuer = claim.OriginalIssuer
            userClaim.ValueType = claim.ValueType
            userClaim.Save
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function RemoveClaimAsync(ByVal user As S5T.IdUser, ByVal claim As System.Security.Claims.Claim) As System.Threading.Tasks.Task Implements Microsoft.AspNet.Identity.IUserClaimStore(Of S5T.IdUser).RemoveClaimAsync , Microsoft.AspNet.Identity.IUserClaimStore(Of S5T.IdUser, Long).RemoveClaimAsync
            Return Me.RemoveClaimAsync(user, claim, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function RemoveClaimAsync(ByVal user As S5T.IdUser, ByVal claim As System.Security.Claims.Claim, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            If (claim Is Nothing) Then
                Throw New System.ArgumentNullException("claim")
            End If
            S5T.IdUserClaimCollection.DeleteByClaim(claim.Type, claim.Value)
            Return System.Threading.Tasks.Task.FromResult(0)
        End Function
        
        Public Overloads Overridable Function GetClaimsAsync(ByVal user As S5T.IdUser) As System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim)) Implements Microsoft.AspNet.Identity.IUserClaimStore(Of S5T.IdUser).GetClaimsAsync , Microsoft.AspNet.Identity.IUserClaimStore(Of S5T.IdUser, Long).GetClaimsAsync
            Return Me.GetClaimsAsync(user, System.Threading.CancellationToken.None)
        End Function
        
        Public Overloads Overridable Function GetClaimsAsync(ByVal user As S5T.IdUser, ByVal cancellationToken As System.Threading.CancellationToken) As System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
            cancellationToken.ThrowIfCancellationRequested
            Me.ThrowIfDisposed
            If (user Is Nothing) Then
                Throw New System.ArgumentNullException("user")
            End If
            Dim result As System.Collections.Generic.IList(Of System.Security.Claims.Claim) = New System.Collections.Generic.List(Of System.Security.Claims.Claim)()
            Dim enumerator As System.Collections.Generic.IEnumerator(Of S5T.IdUserClaim) = user.Claims.GetEnumerator
            Do While enumerator.MoveNext
                Dim userClaim As S5T.IdUserClaim = enumerator.Current
                result.Add(New System.Security.Claims.Claim(userClaim.Type, userClaim.Value, userClaim.ValueType, userClaim.Issuer, userClaim.OriginalIssuer))

            Loop
            Return System.Threading.Tasks.Task.FromResult(result)
        End Function
        
        Public Overridable Sub Dispose() Implements System.IDisposable.Dispose
            Me._disposed = true
        End Sub
        
        Protected Overridable Sub ThrowIfDisposed()
            If (Me._disposed = true) Then
                Throw New System.ObjectDisposedException(Me.GetType.Name)
            End If
        End Sub
    End Class
End Namespace
