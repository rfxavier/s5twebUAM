'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports CodeFluent.Runtime
Imports CodeFluent.Runtime.Utilities

Namespace S5T
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: .
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.01234.05678"),  _
     System.SerializableAttribute(),  _
     System.ComponentModel.DataObjectAttribute(),  _
     System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, pNome={pNome}, pCodigo={pCodigo}"),  _
     System.ComponentModel.TypeConverterAttribute(GetType(CodeFluent.Runtime.Design.NameTypeConverter))>  _
    Partial Public Class Empresa
        Implements System.ICloneable, System.IComparable, System.IComparable(Of S5T.Empresa), CodeFluent.Runtime.ICodeFluentCollectionEntity(Of Integer), System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable(Of S5T.Empresa)
        
        Private _raisePropertyChangedEvents As Boolean = true
        
        Private _entityState As CodeFluent.Runtime.CodeFluentEntityState
        
        Private _pId As Long = -1
        
        Private _pCodigo As Integer = CodeFluentPersistence.DefaultInt32Value
        
        Private _pNome As String = CType(Nothing, String)
        
        <System.NonSerializedAttribute()>  _
        Private _oCadastros As S5T.CadastroCollection
        
        <System.NonSerializedAttribute()>  _
        Private _oSistemas As S5T.SistemaCollection
        
        <System.NonSerializedAttribute()>  _
        Private _oFiliais As S5T.FilialCollection
        
        Private _xDataHoraReg As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _xLoginReg As String = CType(Nothing, String)
        
        Private _pSimplesNacionalValorAliquotaCreditoICMS As Double = CodeFluentPersistence.DefaultDoubleValue
        
        Private _sSimplesNacionalCategoria As S5T.EmpresaSimplesNacionalCategoria = S5T.EmpresaSimplesNacionalCategoria.[Me]
        
        Private _sCodigoRegimeTributario As S5T.EmpresaCodigoRegimeTributario = S5T.EmpresaCodigoRegimeTributario.SimplesNacional
        
        Private _sCodigoRegimeTributarioNormal As S5T.EmpresaCodigoRegimeTributarioNormal = S5T.EmpresaCodigoRegimeTributarioNormal.NaoSeAplica
        
        Public Sub New()
            MyBase.New
            Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Overridable Property RaisePropertyChangedEvents() As Boolean
            Get
                Return Me._raisePropertyChangedEvents
            End Get
            Set
                Me._raisePropertyChangedEvents = value
            End Set
        End Property
        
        Public Overridable Property EntityKey() As String Implements CodeFluent.Runtime.ICodeFluentEntity.EntityKey
            Get
                Return Me.pId.ToString
            End Get
            Set
                Me.pId = CType(ConvertUtilities.ChangeType(value, GetType(Long), -1),Long)
            End Set
        End Property
        
        Public Overridable ReadOnly Property EntityDisplayName() As String Implements CodeFluent.Runtime.ICodeFluentEntity.EntityDisplayName
            Get
                Return Me.pNome
            End Get
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(-1,Long)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Long)),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property pId() As Long
            Get
                Return Me._pId
            End Get
            Set
                Me._pId = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pId"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Integer))>  _
        Public Property pCodigo() As Integer
            Get
                Return Me._pCodigo
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of Integer).Default.Equals(value, Me._pCodigo) = true) Then
                    Return
                End If
                Dim oldKey As Integer = Me._pCodigo
                Me._pCodigo = value
                Try 
                    Me.OnCollectionKeyChanged(oldKey)
                Catch __exception As System.ArgumentException
                    Me._pCodigo = oldKey
                    Return
                End Try
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pCodigo"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property pNome() As String
            Get
                Return Me._pNome
            End Get
            Set
                Me._pNome = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pNome"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property oCadastros() As S5T.CadastroCollection
            Get
                If (Me._oCadastros Is Nothing) Then
                    If ((Me.pId = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._oCadastros = New S5T.CadastroCollection(Me, Nothing, Nothing, Nothing)
                        Return Me._oCadastros
                    End If
                    Me._oCadastros = S5T.CadastroCollection.LoadoCadastrosoEmpresasByEmpresa(Me)
                End If
                Return Me._oCadastros
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property oSistemas() As S5T.SistemaCollection
            Get
                If (Me._oSistemas Is Nothing) Then
                    If ((Me.pId = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._oSistemas = New S5T.SistemaCollection(Me)
                        Return Me._oSistemas
                    End If
                    Me._oSistemas = S5T.SistemaCollection.LoadoSistemasoEmpresasByEmpresa(Me)
                End If
                Return Me._oSistemas
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property oFiliais() As S5T.FilialCollection
            Get
                If (Me._oFiliais Is Nothing) Then
                    If ((Me.pId = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._oFiliais = New S5T.FilialCollection(Nothing, Me)
                        Return Me._oFiliais
                    End If
                    Me._oFiliais = S5T.FilialCollection.LoadByoEmpresa(Me)
                End If
                Return Me._oFiliais
            End Get
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property xDataHoraReg() As Date
            Get
                Return Me._xDataHoraReg
            End Get
            Set
                Me._xDataHoraReg = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("xDataHoraReg"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property xLoginReg() As String
            Get
                Return Me._xLoginReg
            End Get
            Set
                Me._xLoginReg = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("xLoginReg"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultDoubleValue),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Double))>  _
        Public Property pSimplesNacionalValorAliquotaCreditoICMS() As Double
            Get
                Return Me._pSimplesNacionalValorAliquotaCreditoICMS
            End Get
            Set
                Me._pSimplesNacionalValorAliquotaCreditoICMS = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pSimplesNacionalValorAliquotaCreditoICMS"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(S5T.EmpresaSimplesNacionalCategoria))>  _
        Public Property sSimplesNacionalCategoria() As S5T.EmpresaSimplesNacionalCategoria
            Get
                Return Me._sSimplesNacionalCategoria
            End Get
            Set
                Me._sSimplesNacionalCategoria = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("sSimplesNacionalCategoria"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(S5T.EmpresaCodigoRegimeTributario))>  _
        Public Property sCodigoRegimeTributario() As S5T.EmpresaCodigoRegimeTributario
            Get
                Return Me._sCodigoRegimeTributario
            End Get
            Set
                Me._sCodigoRegimeTributario = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("sCodigoRegimeTributario"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(S5T.EmpresaCodigoRegimeTributarioNormal))>  _
        Public Property sCodigoRegimeTributarioNormal() As S5T.EmpresaCodigoRegimeTributarioNormal
            Get
                Return Me._sCodigoRegimeTributarioNormal
            End Get
            Set
                Me._sCodigoRegimeTributarioNormal = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("sCodigoRegimeTributarioNormal"))
            End Set
        End Property
        
        ReadOnly Property System_ComponentModel_IDataErrorInfo_Error() As String Implements System.ComponentModel.IDataErrorInfo.[Error]
            Get
                Return Me.Validate(System.Globalization.CultureInfo.CurrentCulture)
            End Get
        End Property
        
        ReadOnly Property System_ComponentModel_IDataErrorInfo_Item(ByVal columnName As String) As String Implements System.ComponentModel.IDataErrorInfo.Item
            Get
                Return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, Me, columnName, Nothing)
            End Get
        End Property
        
        ReadOnly Property CodeFluent_Runtime_Utilities_IKeyable_System_Int32__Key() As Integer Implements CodeFluent.Runtime.Utilities.IKeyable(Of Integer).Key
            Get
                Return Me.pCodigo
            End Get
        End Property
        
        Public Overridable Property EntityState() As CodeFluent.Runtime.CodeFluentEntityState Implements CodeFluent.Runtime.ICodeFluentEntity.EntityState
            Get
                Return Me._entityState
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of CodeFluent.Runtime.CodeFluentEntityState).Default.Equals(value, Me.EntityState) = true) Then
                    Return
                End If
                If ((Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted)  _
                            AndAlso (value = CodeFluent.Runtime.CodeFluentEntityState.Modified)) Then
                    Return
                End If
                If ((Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created)  _
                            AndAlso (value = CodeFluent.Runtime.CodeFluentEntityState.Modified)) Then
                    Return
                End If
                Me._entityState = value
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("EntityState"))
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Public Event EntityAction As CodeFluent.Runtime.CodeFluentEntityActionEventHandler Implements CodeFluent.Runtime.ICodeFluentEntity.EntityAction
        
        Public Event KeyChanged As System.EventHandler(Of CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of Integer)) Implements CodeFluent.Runtime.Utilities.IKeyable(Of Integer).KeyChanged
        
        Protected Overridable Sub OnPropertyChanged(ByVal e As System.ComponentModel.PropertyChangedEventArgs)
            If (Me.RaisePropertyChangedEvents = false) Then
                Return
            End If
            If (Not (Me.PropertyChangedEvent) Is Nothing) Then
                RaiseEvent PropertyChanged(Me, e)
            End If
        End Sub
        
        Protected Overridable Sub OnEntityAction(ByVal e As CodeFluent.Runtime.CodeFluentEntityActionEventArgs)
            If (Not (Me.EntityActionEvent) Is Nothing) Then
                RaiseEvent EntityAction(Me, e)
            End If
        End Sub
        
        Public Overloads Overridable Function Equals(ByVal empresa As S5T.Empresa) As Boolean Implements System.IEquatable(Of S5T.Empresa).Equals
            If (empresa Is Nothing) Then
                Return false
            End If
            If (Me.pId = -1) Then
                Return MyBase.Equals(empresa)
            End If
            Return (Me.pId.Equals(empresa.pId) = true)
        End Function
        
        Public Overloads Overrides Function GetHashCode() As Integer
            Return Me.pId.GetHashCode
        End Function
        
        Public Overloads Overrides Function Equals(ByVal obj As Object) As Boolean
            Dim empresa As S5T.Empresa = Nothing
            Try 
                empresa = CType(obj,S5T.Empresa)
            Catch icex As System.InvalidCastException
                empresa = Nothing
            End Try
            Return Me.Equals(empresa)
        End Function
        
        Friend Sub SaveoCadastrosRelations()
            If (Me._oCadastros Is Nothing) Then
                Return
            End If
            Dim enumerator As System.Collections.IEnumerator = CType(Me._oCadastros,CodeFluent.Runtime.ICodeFluentSet).Relations.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                Dim cadastro As S5T.Cadastro = CType(entry.Key,S5T.Cadastro)
                Dim relationType As CodeFluent.Runtime.CodeFluentRelationType = CType(entry.Value,CodeFluent.Runtime.CodeFluentRelationType)
                If ((relationType = CodeFluent.Runtime.CodeFluentRelationType.Added)  _
                            AndAlso ((cadastro.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked)  _
                            = false)) Then
                    Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence.CreateStoredProcedureCommand(Nothing, "empresa", "Savecadastrooempresas")
                    persistence.AddParameter("@pId", cadastro.pId, CType(-1,Long))
                    persistence.AddParameter("@pId2", Me.pId, CType(-1,Long))
                    persistence.ExecuteNonQuery
                Else
                    Dim persistence1 As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence1.CreateStoredProcedureCommand(Nothing, "empresa", "Deletecadastrooempresas")
                    persistence1.AddParameter("@pId", cadastro.pId, CType(-1,Long))
                    persistence1.AddParameter("@pId2", Me.pId, CType(-1,Long))
                    persistence1.ExecuteNonQuery
                End If
                If (cadastro.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked) Then
                    cadastro.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                b = enumerator.MoveNext
            Loop
            CType(Me._oCadastros,CodeFluent.Runtime.ICodeFluentSet).Relations.Clear
        End Sub
        
        Friend Sub SaveoSistemasRelations()
            If (Me._oSistemas Is Nothing) Then
                Return
            End If
            Dim enumerator As System.Collections.IEnumerator = CType(Me._oSistemas,CodeFluent.Runtime.ICodeFluentSet).Relations.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                Dim sistema As S5T.Sistema = CType(entry.Key,S5T.Sistema)
                Dim relationType As CodeFluent.Runtime.CodeFluentRelationType = CType(entry.Value,CodeFluent.Runtime.CodeFluentRelationType)
                If ((relationType = CodeFluent.Runtime.CodeFluentRelationType.Added)  _
                            AndAlso ((sistema.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked)  _
                            = false)) Then
                    Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence.CreateStoredProcedureCommand(Nothing, "sistema", "Saveempresaosistemas")
                    persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
                    persistence.AddParameter("@pId2", sistema.pId, CType(-1,Long))
                    persistence.ExecuteNonQuery
                Else
                    Dim persistence1 As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence1.CreateStoredProcedureCommand(Nothing, "sistema", "Deleteempresaosistemas")
                    persistence1.AddParameter("@pId", Me.pId, CType(-1,Long))
                    persistence1.AddParameter("@pId2", sistema.pId, CType(-1,Long))
                    persistence1.ExecuteNonQuery
                End If
                If (sistema.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked) Then
                    sistema.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                b = enumerator.MoveNext
            Loop
            CType(Me._oSistemas,CodeFluent.Runtime.ICodeFluentSet).Relations.Clear
        End Sub
        
        Overridable Function System_IComparable_CompareTo(ByVal value As Object) As Integer Implements System.IComparable.CompareTo
            Dim empresa As S5T.Empresa = Nothing
            Try 
                empresa = CType(value,S5T.Empresa)
            Catch icex As System.InvalidCastException
                empresa = Nothing
            End Try
            If (empresa Is Nothing) Then
                Throw New System.ArgumentException("value")
            End If
            Dim localCompareTo As Integer = Me.CompareTo(empresa)
            Return localCompareTo
        End Function
        
        Public Overridable Function CompareTo(ByVal empresa As S5T.Empresa) As Integer Implements System.IComparable(Of S5T.Empresa).CompareTo
            If (empresa Is Nothing) Then
                Throw New System.ArgumentNullException("empresa")
            End If
            Dim localCompareTo As Integer = Me.pCodigo.CompareTo(empresa.pCodigo)
            Return localCompareTo
        End Function
        
        Public Overloads Overridable Function Validate(ByVal culture As System.Globalization.CultureInfo) As String
            Return CodeFluentPersistence.Validate(culture, Me, Nothing)
        End Function
        
        Public Overloads Overridable Sub Validate(ByVal culture As System.Globalization.CultureInfo, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException)) Implements CodeFluent.Runtime.ICodeFluentSummaryValidator.Validate
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results)
            evt.Culture = culture
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Dim externalValidate As String
                If (Not (evt.Argument) Is Nothing) Then
                    externalValidate = evt.Argument.ToString
                Else
                    externalValidate = S5T.Resources.Manager.GetStringWithDefault(culture, "S5T.Empresa.ExternalValidate", "Type 'S5T.Empresa' cannot be validated.", Nothing)
                End If
                CodeFluentPersistence.AddValidationError(results, externalValidate)
            End If
            CodeFluentPersistence.ValidateMember(culture, results, Me, Nothing)
            If (Me.pCodigo = CodeFluentPersistence.DefaultInt32Value) Then
                Dim localValidate As String = S5T.Resources.Manager.GetStringWithDefault(culture, "S5T.Empresa.pCodigo.NullException", "'pCodigo' property cannot be set to '0' for type 'S5T.Empresa'", Nothing)
                CodeFluentPersistence.AddValidationError(results, localValidate)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results))
        End Sub
        
        Public Overloads Sub Validate()
            Dim var As String = Me.Validate(System.Globalization.CultureInfo.CurrentCulture)
            If (Not (var) Is Nothing) Then
                Throw New CodeFluent.Runtime.CodeFluentValidationException(var)
            End If
        End Sub
        
        Function CodeFluent_Runtime_ICodeFluentValidator_Validate(ByVal culture As System.Globalization.CultureInfo) As String Implements CodeFluent.Runtime.ICodeFluentValidator.Validate
            Dim localValidate As String = Me.Validate(culture)
            Return localValidate
        End Function
        
        Sub CodeFluent_Runtime_ICodeFluentMemberValidator_Validate(ByVal culture As System.Globalization.CultureInfo, ByVal memberName As String, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException)) Implements CodeFluent.Runtime.ICodeFluentMemberValidator.Validate
            Me.ValidateMember(culture, memberName, results)
        End Sub
        
        Public Overloads Overridable Function Delete() As Boolean Implements CodeFluent.Runtime.ICodeFluentEntity.Delete
            Dim ret As Boolean = false
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return ret
            End If
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "empresa", "Delete")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            persistence.ExecuteNonQuery
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false))
            ret = true
            Return ret
        End Function
        
        Protected Overridable Sub ReadRecord(ByVal reader As System.Data.IDataReader, ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (((options And CodeFluent.Runtime.CodeFluentReloadOptions.Properties)  _
                        = 0)  _
                        = false) Then
                Me._pId = CodeFluentPersistence.GetReaderValue(reader, "pId", CType(-1,Long))
                Me._pCodigo = CodeFluentPersistence.GetReaderValue(reader, "pCodigo", CType(CodeFluentPersistence.DefaultInt32Value,Integer))
                Me._pNome = CodeFluentPersistence.GetReaderValue(reader, "pNome", CType(CType(Nothing, String),String))
                Me._xDataHoraReg = CodeFluentPersistence.GetReaderValue(reader, "xDataHoraReg", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me._xLoginReg = CodeFluentPersistence.GetReaderValue(reader, "xLoginReg", CType(CType(Nothing, String),String))
                Me._pSimplesNacionalValorAliquotaCreditoICMS = CodeFluentPersistence.GetReaderValue(reader, "pSimplesNacionalValorAliquotaCreditoICMS", CType(CodeFluentPersistence.DefaultDoubleValue,Double))
                Me._sSimplesNacionalCategoria = CType(CodeFluentPersistence.GetReaderValueEnum(reader, "sSimplesNacionalCategoria", CType(S5T.EmpresaSimplesNacionalCategoria.[Me],S5T.EmpresaSimplesNacionalCategoria)),S5T.EmpresaSimplesNacionalCategoria)
                Me._sCodigoRegimeTributario = CType(CodeFluentPersistence.GetReaderValueEnum(reader, "sCodigoRegimeTributario", CType(S5T.EmpresaCodigoRegimeTributario.SimplesNacional,S5T.EmpresaCodigoRegimeTributario)),S5T.EmpresaCodigoRegimeTributario)
                Me._sCodigoRegimeTributarioNormal = CType(CodeFluentPersistence.GetReaderValueEnum(reader, "sCodigoRegimeTributarioNormal", CType(S5T.EmpresaCodigoRegimeTributarioNormal.NaoSeAplica,S5T.EmpresaCodigoRegimeTributarioNormal)),S5T.EmpresaCodigoRegimeTributarioNormal)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false))
        End Sub
        
        Sub CodeFluent_Runtime_ICodeFluentEntity_ReadRecord(ByVal reader As System.Data.IDataReader) Implements CodeFluent.Runtime.ICodeFluentEntity.ReadRecord
            Me.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
        End Sub
        
        Protected Overridable Sub ReadRecordOnSave(ByVal reader As System.Data.IDataReader)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            Me._pId = CodeFluentPersistence.GetReaderValue(reader, "pId", CType(-1,Long))
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false))
        End Sub
        
        Sub CodeFluent_Runtime_ICodeFluentEntity_ReadRecordOnSave(ByVal reader As System.Data.IDataReader) Implements CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave
            Me.ReadRecordOnSave(reader)
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shared Function Load(ByVal pId As Long) As S5T.Empresa
            If (pId = -1) Then
                Return Nothing
            End If
            Dim empresa As S5T.Empresa = New S5T.Empresa()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "empresa", "Load")
            persistence.AddParameter("@pId", pId, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    empresa.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    empresa.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return empresa
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shared Function LoadBypCodigo(ByVal pCodigo As Integer) As S5T.Empresa
            If (pCodigo = CodeFluentPersistence.DefaultInt32Value) Then
                Return Nothing
            End If
            Dim empresa As S5T.Empresa = New S5T.Empresa()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "empresa", "LoadBypCodigo")
            persistence.AddParameter("@pCodigo", pCodigo, CodeFluentPersistence.DefaultInt32Value)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    empresa.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    empresa.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return empresa
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        Public Overridable Function Reload(ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions) As Boolean
            Dim ret As Boolean = false
            If (Me.pId = -1) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "empresa", "Load")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecord(reader, options)
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    ret = true
                Else
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return ret
        End Function
        
        Protected Overridable Function BaseSave(ByVal force As Boolean) As Boolean
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) Then
                S5T.Empresa.Delete(Me)
                Return false
            End If
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return false
            End If
            CodeFluentPersistence.ThrowIfDeleted(Me)
            Me.Validate
            If ((force = false)  _
                        AndAlso (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged)) Then
                Return false
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "empresa", "Save")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            persistence.AddParameter("@pCodigo", Me.pCodigo, CodeFluentPersistence.DefaultInt32Value)
            persistence.AddParameter("@pNome", Me.pNome, CType(Nothing, String))
            persistence.AddParameter("@xDataHoraReg", Me.xDataHoraReg, CodeFluentPersistence.DefaultDateTimeValue)
            persistence.AddParameter("@xLoginReg", Me.xLoginReg, CType(Nothing, String))
            persistence.AddParameter("@pSimplesNacionalValorAliquotaCreditoICMS", Me.pSimplesNacionalValorAliquotaCreditoICMS, CodeFluentPersistence.DefaultDoubleValue)
            persistence.AddParameterEnumInt32("@sSimplesNacionalCategoria", Me.sSimplesNacionalCategoria, S5T.EmpresaSimplesNacionalCategoria.[Me])
            persistence.AddParameterEnumInt32("@sCodigoRegimeTributario", Me.sCodigoRegimeTributario, S5T.EmpresaCodigoRegimeTributario.SimplesNacional)
            persistence.AddParameterEnumInt32("@sCodigoRegimeTributarioNormal", Me.sCodigoRegimeTributarioNormal, S5T.EmpresaCodigoRegimeTributarioNormal.NaoSeAplica)
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecordOnSave(reader)
                End If
                CodeFluentPersistence.NextResults(reader)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Me.SaveoCadastrosRelations
            Me.SaveoSistemasRelations
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false))
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
            Return true
        End Function
        
        Public Overloads Overridable Function Save() As Boolean Implements CodeFluent.Runtime.ICodeFluentEntity.Save
            Dim localSave As Boolean = Me.BaseSave(false)
            Return localSave
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Shared Function Save(ByVal empresa As S5T.Empresa) As Boolean
            If (empresa Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = empresa.Save
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Shared Function Insert(ByVal empresa As S5T.Empresa) As Boolean
            Dim ret As Boolean = S5T.Empresa.Save(empresa)
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Shared Function Delete(ByVal empresa As S5T.Empresa) As Boolean
            If (empresa Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = empresa.Delete
            Return ret
        End Function
        
        Public Function Trace() As String
            Dim stringBuilder As System.Text.StringBuilder = New System.Text.StringBuilder()
            Dim stringWriter As System.IO.StringWriter = New System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture)
            Dim writer As System.CodeDom.Compiler.IndentedTextWriter = New System.CodeDom.Compiler.IndentedTextWriter(stringWriter)
            Me.BaseTrace(writer)
            writer.Flush
            CType(writer,System.IDisposable).Dispose
            CType(stringWriter,System.IDisposable).Dispose
            Dim sr As String = stringBuilder.ToString
            Return sr
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub CodeFluent_Runtime_ICodeFluentObject_Trace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter) Implements CodeFluent.Runtime.ICodeFluentObject.Trace
            Me.BaseTrace(writer)
        End Sub
        
        Protected Overridable Sub BaseTrace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter)
            writer.Write("[")
            writer.Write("pId=")
            writer.Write(Me.pId)
            writer.Write(",")
            writer.Write("pCodigo=")
            writer.Write(Me.pCodigo)
            writer.Write(",")
            writer.Write("pNome=")
            writer.Write(Me.pNome)
            writer.Write(",")
            writer.Write("oCadastros=")
            If (Not (Me._oCadastros) Is Nothing) Then
                CType(Me._oCadastros,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("oSistemas=")
            If (Not (Me._oSistemas) Is Nothing) Then
                CType(Me._oSistemas,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("oFiliais=")
            If (Not (Me._oFiliais) Is Nothing) Then
                CType(Me._oFiliais,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("xDataHoraReg=")
            writer.Write(Me.xDataHoraReg)
            writer.Write(",")
            writer.Write("xLoginReg=")
            writer.Write(Me.xLoginReg)
            writer.Write(",")
            writer.Write("pSimplesNacionalValorAliquotaCreditoICMS=")
            writer.Write(Me.pSimplesNacionalValorAliquotaCreditoICMS)
            writer.Write(",")
            writer.Write("sSimplesNacionalCategoria=")
            writer.Write(Me.sSimplesNacionalCategoria)
            writer.Write(",")
            writer.Write("sCodigoRegimeTributario=")
            writer.Write(Me.sCodigoRegimeTributario)
            writer.Write(",")
            writer.Write("sCodigoRegimeTributarioNormal=")
            writer.Write(Me.sCodigoRegimeTributarioNormal)
            writer.Write(", EntityState=")
            writer.Write(Me.EntityState)
            writer.Write("]")
        End Sub
        
        Public Overloads Overridable Sub SetoCadastros(ByVal values As System.Collections.IDictionary)
            If (values Is Nothing) Then
                Throw New System.ArgumentNullException("values")
            End If
            Me.oCadastros.Clear
            Dim enumerator As System.Collections.IEnumerator = values.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                If (Not (entry.Key) Is Nothing) Then
                    Me.oCadastros.AddByEntityKey(entry.Key.ToString)
                End If
                b = enumerator.MoveNext
            Loop
        End Sub
        
        Public Overloads Overridable Sub SetoCadastros(ByVal values As Object)
            If (values Is Nothing) Then
                Return
            End If
            Dim dictionary As System.Collections.IDictionary = Nothing
            Try 
                dictionary = CType(values,System.Collections.IDictionary)
            Catch icex As System.InvalidCastException
                dictionary = Nothing
            End Try
            If (Not (dictionary) Is Nothing) Then
                Me.SetoCadastros(dictionary)
                Return
            End If
            Dim oCadastros As S5T.CadastroCollection = Nothing
            Try 
                oCadastros = CType(values,S5T.CadastroCollection)
            Catch icex1 As System.InvalidCastException
                oCadastros = Nothing
            End Try
            If (Not (oCadastros) Is Nothing) Then
                Me._oCadastros = oCadastros
                Return
            End If
        End Sub
        
        Public Overloads Overridable Sub SetoSistemas(ByVal values As System.Collections.IDictionary)
            If (values Is Nothing) Then
                Throw New System.ArgumentNullException("values")
            End If
            Me.oSistemas.Clear
            Dim enumerator As System.Collections.IEnumerator = values.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                If (Not (entry.Key) Is Nothing) Then
                    Me.oSistemas.AddByEntityKey(entry.Key.ToString)
                End If
                b = enumerator.MoveNext
            Loop
        End Sub
        
        Public Overloads Overridable Sub SetoSistemas(ByVal values As Object)
            If (values Is Nothing) Then
                Return
            End If
            Dim dictionary As System.Collections.IDictionary = Nothing
            Try 
                dictionary = CType(values,System.Collections.IDictionary)
            Catch icex As System.InvalidCastException
                dictionary = Nothing
            End Try
            If (Not (dictionary) Is Nothing) Then
                Me.SetoSistemas(dictionary)
                Return
            End If
            Dim oSistemas As S5T.SistemaCollection = Nothing
            Try 
                oSistemas = CType(values,S5T.SistemaCollection)
            Catch icex1 As System.InvalidCastException
                oSistemas = Nothing
            End Try
            If (Not (oSistemas) Is Nothing) Then
                Me._oSistemas = oSistemas
                Return
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shared Function LoadByEntityKey(ByVal key As String) As S5T.Empresa
            If (key Is String.Empty) Then
                Return Nothing
            End If
            Dim empresa As S5T.Empresa
            Dim var As Long = CType(ConvertUtilities.ChangeType(key, GetType(Long), -1),Long)
            empresa = S5T.Empresa.Load(var)
            Return empresa
        End Function
        
        Protected Overridable Sub ValidateMember(ByVal culture As System.Globalization.CultureInfo, ByVal memberName As String, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException))
        End Sub
        
        Public Overloads Function Clone(ByVal deep As Boolean) As S5T.Empresa
            Dim empresa As S5T.Empresa = New S5T.Empresa()
            Me.CopyTo(empresa, deep)
            Return empresa
        End Function
        
        Public Overloads Function Clone() As S5T.Empresa
            Dim localClone As S5T.Empresa = Me.Clone(true)
            Return localClone
        End Function
        
        Function System_ICloneable_Clone() As Object Implements System.ICloneable.Clone
            Dim localClone As Object = Me.Clone
            Return localClone
        End Function
        
        Public Overridable Sub CopyFrom(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            If (dict.Contains("pId") = true) Then
                Me.pId = CType(ConvertUtilities.ChangeType(dict("pId"), GetType(Long), -1),Long)
            End If
            If (dict.Contains("pCodigo") = true) Then
                Me.pCodigo = CType(ConvertUtilities.ChangeType(dict("pCodigo"), GetType(Integer), CodeFluentPersistence.DefaultInt32Value),Integer)
            End If
            If (dict.Contains("pSimplesNacionalValorAliquotaCreditoICMS") = true) Then
                Me.pSimplesNacionalValorAliquotaCreditoICMS = CType(ConvertUtilities.ChangeType(dict("pSimplesNacionalValorAliquotaCreditoICMS"), GetType(Double), CodeFluentPersistence.DefaultDoubleValue),Double)
            End If
            If (dict.Contains("xLoginReg") = true) Then
                Me.xLoginReg = CType(ConvertUtilities.ChangeType(dict("xLoginReg"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("sCodigoRegimeTributario") = true) Then
                Me.sCodigoRegimeTributario = CType(ConvertUtilities.ChangeType(dict("sCodigoRegimeTributario"), GetType(S5T.EmpresaCodigoRegimeTributario), S5T.EmpresaCodigoRegimeTributario.SimplesNacional),S5T.EmpresaCodigoRegimeTributario)
            End If
            If (dict.Contains("sSimplesNacionalCategoria") = true) Then
                Me.sSimplesNacionalCategoria = CType(ConvertUtilities.ChangeType(dict("sSimplesNacionalCategoria"), GetType(S5T.EmpresaSimplesNacionalCategoria), S5T.EmpresaSimplesNacionalCategoria.[Me]),S5T.EmpresaSimplesNacionalCategoria)
            End If
            If (dict.Contains("xDataHoraReg") = true) Then
                Me.xDataHoraReg = CType(ConvertUtilities.ChangeType(dict("xDataHoraReg"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("pNome") = true) Then
                Me.pNome = CType(ConvertUtilities.ChangeType(dict("pNome"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("sCodigoRegimeTributarioNormal") = true) Then
                Me.sCodigoRegimeTributarioNormal = CType(ConvertUtilities.ChangeType(dict("sCodigoRegimeTributarioNormal"), GetType(S5T.EmpresaCodigoRegimeTributarioNormal), S5T.EmpresaCodigoRegimeTributarioNormal.NaoSeAplica),S5T.EmpresaCodigoRegimeTributarioNormal)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal empresa As S5T.Empresa, ByVal deep As Boolean)
            If (empresa Is Nothing) Then
                Throw New System.ArgumentNullException("empresa")
            End If
            empresa.pId = Me.pId
            empresa.pCodigo = Me.pCodigo
            empresa.pSimplesNacionalValorAliquotaCreditoICMS = Me.pSimplesNacionalValorAliquotaCreditoICMS
            empresa.xLoginReg = Me.xLoginReg
            empresa.sCodigoRegimeTributario = Me.sCodigoRegimeTributario
            empresa.sSimplesNacionalCategoria = Me.sSimplesNacionalCategoria
            empresa.xDataHoraReg = Me.xDataHoraReg
            empresa.pNome = Me.pNome
            empresa.sCodigoRegimeTributarioNormal = Me.sCodigoRegimeTributarioNormal
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, empresa))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            dict("pId") = Me.pId
            dict("pCodigo") = Me.pCodigo
            dict("pSimplesNacionalValorAliquotaCreditoICMS") = Me.pSimplesNacionalValorAliquotaCreditoICMS
            dict("xLoginReg") = Me.xLoginReg
            dict("sCodigoRegimeTributario") = Me.sCodigoRegimeTributario
            dict("sSimplesNacionalCategoria") = Me.sSimplesNacionalCategoria
            dict("xDataHoraReg") = Me.xDataHoraReg
            dict("pNome") = Me.pNome
            dict("sCodigoRegimeTributarioNormal") = Me.sCodigoRegimeTributarioNormal
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict))
        End Sub
        
        Protected Sub OnCollectionKeyChanged(ByVal key As Integer)
            If (Not (Me.KeyChangedEvent) Is Nothing) Then
                RaiseEvent KeyChanged(Me, New CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of Integer)(key))
            End If
        End Sub
    End Class
End Namespace
