'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports CodeFluent.Runtime
Imports CodeFluent.Runtime.Utilities

Namespace S5T
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: .
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.01234.05678"),  _
     System.SerializableAttribute(),  _
     System.ComponentModel.DataObjectAttribute(),  _
     System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, pNome={pNome}, pCodigo={pCodigo}"),  _
     System.ComponentModel.TypeConverterAttribute(GetType(CodeFluent.Runtime.Design.NameTypeConverter))>  _
    Partial Public Class Sistema
        Implements System.ICloneable, System.IComparable, System.IComparable(Of S5T.Sistema), CodeFluent.Runtime.ICodeFluentCollectionEntity(Of Integer), System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable(Of S5T.Sistema)
        
        Private _raisePropertyChangedEvents As Boolean = true
        
        Private _entityState As CodeFluent.Runtime.CodeFluentEntityState
        
        Private _pId As Long = -1
        
        Private _pNome As String = CType(Nothing, String)
        
        <System.NonSerializedAttribute()>  _
        Private _oMenus As S5T.MenuCollection
        
        <System.NonSerializedAttribute()>  _
        Private _oEmpresas As S5T.EmpresaCollection
        
        Private _pCodigo As Integer = CodeFluentPersistence.DefaultInt32Value
        
        <System.NonSerializedAttribute()>  _
        Private _oMenuPermissoes As S5T.MenuPermissaoCollection
        
        Private _xDataHoraReg As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _xLoginReg As String = CType(Nothing, String)
        
        Public Sub New()
            MyBase.New
            Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Overridable Property RaisePropertyChangedEvents() As Boolean
            Get
                Return Me._raisePropertyChangedEvents
            End Get
            Set
                Me._raisePropertyChangedEvents = value
            End Set
        End Property
        
        Public Overridable Property EntityKey() As String Implements CodeFluent.Runtime.ICodeFluentEntity.EntityKey
            Get
                Return Me.pId.ToString
            End Get
            Set
                Me.pId = CType(ConvertUtilities.ChangeType(value, GetType(Long), -1),Long)
            End Set
        End Property
        
        Public Overridable ReadOnly Property EntityDisplayName() As String Implements CodeFluent.Runtime.ICodeFluentEntity.EntityDisplayName
            Get
                Return Me.pNome
            End Get
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(-1,Long)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Long)),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property pId() As Long
            Get
                Return Me._pId
            End Get
            Set
                Me._pId = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pId"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property pNome() As String
            Get
                Return Me._pNome
            End Get
            Set
                Me._pNome = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pNome"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property oMenus() As S5T.MenuCollection
            Get
                If (Me._oMenus Is Nothing) Then
                    If ((Me.pId = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._oMenus = New S5T.MenuCollection(Me)
                        Return Me._oMenus
                    End If
                    Me._oMenus = S5T.MenuCollection.LoadByoSistema(Me)
                End If
                Return Me._oMenus
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property oEmpresas() As S5T.EmpresaCollection
            Get
                If (Me._oEmpresas Is Nothing) Then
                    If ((Me.pId = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._oEmpresas = New S5T.EmpresaCollection(Nothing, Me)
                        Return Me._oEmpresas
                    End If
                    Me._oEmpresas = S5T.EmpresaCollection.LoadoEmpresasoSistemasBySistema(Me)
                End If
                Return Me._oEmpresas
            End Get
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Integer))>  _
        Public Property pCodigo() As Integer
            Get
                Return Me._pCodigo
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of Integer).Default.Equals(value, Me._pCodigo) = true) Then
                    Return
                End If
                Dim oldKey As Integer = Me._pCodigo
                Me._pCodigo = value
                Try 
                    Me.OnCollectionKeyChanged(oldKey)
                Catch __exception As System.ArgumentException
                    Me._pCodigo = oldKey
                    Return
                End Try
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pCodigo"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property oMenuPermissoes() As S5T.MenuPermissaoCollection
            Get
                If (Me._oMenuPermissoes Is Nothing) Then
                    If ((Me.pId = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._oMenuPermissoes = New S5T.MenuPermissaoCollection(Nothing, Me)
                        Return Me._oMenuPermissoes
                    End If
                    Me._oMenuPermissoes = S5T.MenuPermissaoCollection.LoadByoSistema(Me)
                End If
                Return Me._oMenuPermissoes
            End Get
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property xDataHoraReg() As Date
            Get
                Return Me._xDataHoraReg
            End Get
            Set
                Me._xDataHoraReg = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("xDataHoraReg"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property xLoginReg() As String
            Get
                Return Me._xLoginReg
            End Get
            Set
                Me._xLoginReg = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("xLoginReg"))
            End Set
        End Property
        
        ReadOnly Property System_ComponentModel_IDataErrorInfo_Error() As String Implements System.ComponentModel.IDataErrorInfo.[Error]
            Get
                Return Me.Validate(System.Globalization.CultureInfo.CurrentCulture)
            End Get
        End Property
        
        ReadOnly Property System_ComponentModel_IDataErrorInfo_Item(ByVal columnName As String) As String Implements System.ComponentModel.IDataErrorInfo.Item
            Get
                Return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, Me, columnName, Nothing)
            End Get
        End Property
        
        ReadOnly Property CodeFluent_Runtime_Utilities_IKeyable_System_Int32__Key() As Integer Implements CodeFluent.Runtime.Utilities.IKeyable(Of Integer).Key
            Get
                Return Me.pCodigo
            End Get
        End Property
        
        Public Overridable Property EntityState() As CodeFluent.Runtime.CodeFluentEntityState Implements CodeFluent.Runtime.ICodeFluentEntity.EntityState
            Get
                Return Me._entityState
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of CodeFluent.Runtime.CodeFluentEntityState).Default.Equals(value, Me.EntityState) = true) Then
                    Return
                End If
                If ((Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted)  _
                            AndAlso (value = CodeFluent.Runtime.CodeFluentEntityState.Modified)) Then
                    Return
                End If
                If ((Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created)  _
                            AndAlso (value = CodeFluent.Runtime.CodeFluentEntityState.Modified)) Then
                    Return
                End If
                Me._entityState = value
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("EntityState"))
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Public Event EntityAction As CodeFluent.Runtime.CodeFluentEntityActionEventHandler Implements CodeFluent.Runtime.ICodeFluentEntity.EntityAction
        
        Public Event KeyChanged As System.EventHandler(Of CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of Integer)) Implements CodeFluent.Runtime.Utilities.IKeyable(Of Integer).KeyChanged
        
        Protected Overridable Sub OnPropertyChanged(ByVal e As System.ComponentModel.PropertyChangedEventArgs)
            If (Me.RaisePropertyChangedEvents = false) Then
                Return
            End If
            If (Not (Me.PropertyChangedEvent) Is Nothing) Then
                RaiseEvent PropertyChanged(Me, e)
            End If
        End Sub
        
        Protected Overridable Sub OnEntityAction(ByVal e As CodeFluent.Runtime.CodeFluentEntityActionEventArgs)
            If (Not (Me.EntityActionEvent) Is Nothing) Then
                RaiseEvent EntityAction(Me, e)
            End If
        End Sub
        
        Public Overloads Overridable Function Equals(ByVal sistema As S5T.Sistema) As Boolean Implements System.IEquatable(Of S5T.Sistema).Equals
            If (sistema Is Nothing) Then
                Return false
            End If
            If (Me.pId = -1) Then
                Return MyBase.Equals(sistema)
            End If
            Return (Me.pId.Equals(sistema.pId) = true)
        End Function
        
        Public Overloads Overrides Function GetHashCode() As Integer
            Return Me.pId.GetHashCode
        End Function
        
        Public Overloads Overrides Function Equals(ByVal obj As Object) As Boolean
            Dim sistema As S5T.Sistema = Nothing
            Try 
                sistema = CType(obj,S5T.Sistema)
            Catch icex As System.InvalidCastException
                sistema = Nothing
            End Try
            Return Me.Equals(sistema)
        End Function
        
        Friend Sub SaveoEmpresasRelations()
            If (Me._oEmpresas Is Nothing) Then
                Return
            End If
            Dim enumerator As System.Collections.IEnumerator = CType(Me._oEmpresas,CodeFluent.Runtime.ICodeFluentSet).Relations.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                Dim empresa As S5T.Empresa = CType(entry.Key,S5T.Empresa)
                Dim relationType As CodeFluent.Runtime.CodeFluentRelationType = CType(entry.Value,CodeFluent.Runtime.CodeFluentRelationType)
                If ((relationType = CodeFluent.Runtime.CodeFluentRelationType.Added)  _
                            AndAlso ((empresa.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked)  _
                            = false)) Then
                    Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence.CreateStoredProcedureCommand(Nothing, "sistema", "Saveempresaosistemas")
                    persistence.AddParameter("@pId", empresa.pId, CType(-1,Long))
                    persistence.AddParameter("@pId2", Me.pId, CType(-1,Long))
                    persistence.ExecuteNonQuery
                Else
                    Dim persistence1 As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence1.CreateStoredProcedureCommand(Nothing, "sistema", "Deleteempresaosistemas")
                    persistence1.AddParameter("@pId", empresa.pId, CType(-1,Long))
                    persistence1.AddParameter("@pId2", Me.pId, CType(-1,Long))
                    persistence1.ExecuteNonQuery
                End If
                If (empresa.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked) Then
                    empresa.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                b = enumerator.MoveNext
            Loop
            CType(Me._oEmpresas,CodeFluent.Runtime.ICodeFluentSet).Relations.Clear
        End Sub
        
        Overridable Function System_IComparable_CompareTo(ByVal value As Object) As Integer Implements System.IComparable.CompareTo
            Dim sistema As S5T.Sistema = Nothing
            Try 
                sistema = CType(value,S5T.Sistema)
            Catch icex As System.InvalidCastException
                sistema = Nothing
            End Try
            If (sistema Is Nothing) Then
                Throw New System.ArgumentException("value")
            End If
            Dim localCompareTo As Integer = Me.CompareTo(sistema)
            Return localCompareTo
        End Function
        
        Public Overridable Function CompareTo(ByVal sistema As S5T.Sistema) As Integer Implements System.IComparable(Of S5T.Sistema).CompareTo
            If (sistema Is Nothing) Then
                Throw New System.ArgumentNullException("sistema")
            End If
            Dim localCompareTo As Integer = Me.pCodigo.CompareTo(sistema.pCodigo)
            Return localCompareTo
        End Function
        
        Public Overloads Overridable Function Validate(ByVal culture As System.Globalization.CultureInfo) As String
            Return CodeFluentPersistence.Validate(culture, Me, Nothing)
        End Function
        
        Public Overloads Overridable Sub Validate(ByVal culture As System.Globalization.CultureInfo, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException)) Implements CodeFluent.Runtime.ICodeFluentSummaryValidator.Validate
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results)
            evt.Culture = culture
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Dim externalValidate As String
                If (Not (evt.Argument) Is Nothing) Then
                    externalValidate = evt.Argument.ToString
                Else
                    externalValidate = S5T.Resources.Manager.GetStringWithDefault(culture, "S5T.Sistema.ExternalValidate", "Type 'S5T.Sistema' cannot be validated.", Nothing)
                End If
                CodeFluentPersistence.AddValidationError(results, externalValidate)
            End If
            CodeFluentPersistence.ValidateMember(culture, results, Me, Nothing)
            If (Me.pCodigo = CodeFluentPersistence.DefaultInt32Value) Then
                Dim localValidate As String = S5T.Resources.Manager.GetStringWithDefault(culture, "S5T.Sistema.pCodigo.NullException", "'pCodigo' property cannot be set to '0' for type 'S5T.Sistema'", Nothing)
                CodeFluentPersistence.AddValidationError(results, localValidate)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results))
        End Sub
        
        Public Overloads Sub Validate()
            Dim var As String = Me.Validate(System.Globalization.CultureInfo.CurrentCulture)
            If (Not (var) Is Nothing) Then
                Throw New CodeFluent.Runtime.CodeFluentValidationException(var)
            End If
        End Sub
        
        Function CodeFluent_Runtime_ICodeFluentValidator_Validate(ByVal culture As System.Globalization.CultureInfo) As String Implements CodeFluent.Runtime.ICodeFluentValidator.Validate
            Dim localValidate As String = Me.Validate(culture)
            Return localValidate
        End Function
        
        Sub CodeFluent_Runtime_ICodeFluentMemberValidator_Validate(ByVal culture As System.Globalization.CultureInfo, ByVal memberName As String, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException)) Implements CodeFluent.Runtime.ICodeFluentMemberValidator.Validate
            Me.ValidateMember(culture, memberName, results)
        End Sub
        
        Public Overloads Overridable Function Delete() As Boolean Implements CodeFluent.Runtime.ICodeFluentEntity.Delete
            Dim ret As Boolean = false
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return ret
            End If
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "sistema", "Delete")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            persistence.ExecuteNonQuery
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false))
            ret = true
            Return ret
        End Function
        
        Protected Overridable Sub ReadRecord(ByVal reader As System.Data.IDataReader, ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (((options And CodeFluent.Runtime.CodeFluentReloadOptions.Properties)  _
                        = 0)  _
                        = false) Then
                Me._pId = CodeFluentPersistence.GetReaderValue(reader, "pId", CType(-1,Long))
                Me._pNome = CodeFluentPersistence.GetReaderValue(reader, "pNome", CType(CType(Nothing, String),String))
                Me._pCodigo = CodeFluentPersistence.GetReaderValue(reader, "pCodigo", CType(CodeFluentPersistence.DefaultInt32Value,Integer))
                Me._xDataHoraReg = CodeFluentPersistence.GetReaderValue(reader, "xDataHoraReg", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me._xLoginReg = CodeFluentPersistence.GetReaderValue(reader, "xLoginReg", CType(CType(Nothing, String),String))
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false))
        End Sub
        
        Sub CodeFluent_Runtime_ICodeFluentEntity_ReadRecord(ByVal reader As System.Data.IDataReader) Implements CodeFluent.Runtime.ICodeFluentEntity.ReadRecord
            Me.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
        End Sub
        
        Protected Overridable Sub ReadRecordOnSave(ByVal reader As System.Data.IDataReader)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            Me._pId = CodeFluentPersistence.GetReaderValue(reader, "pId", CType(-1,Long))
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false))
        End Sub
        
        Sub CodeFluent_Runtime_ICodeFluentEntity_ReadRecordOnSave(ByVal reader As System.Data.IDataReader) Implements CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave
            Me.ReadRecordOnSave(reader)
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shared Function Load(ByVal pId As Long) As S5T.Sistema
            If (pId = -1) Then
                Return Nothing
            End If
            Dim sistema As S5T.Sistema = New S5T.Sistema()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "sistema", "Load")
            persistence.AddParameter("@pId", pId, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    sistema.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    sistema.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return sistema
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shared Function LoadBypCodigo(ByVal pCodigo As Integer) As S5T.Sistema
            If (pCodigo = CodeFluentPersistence.DefaultInt32Value) Then
                Return Nothing
            End If
            Dim sistema As S5T.Sistema = New S5T.Sistema()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "sistema", "LoadBypCodigo")
            persistence.AddParameter("@pCodigo", pCodigo, CodeFluentPersistence.DefaultInt32Value)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    sistema.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    sistema.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return sistema
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shared Function LoadByCodSistemaCodEmpresa(ByVal parCodSistema As Integer, ByVal parCodEmpresa As Integer) As S5T.Sistema
            If (parCodSistema = CodeFluentPersistence.DefaultInt32Value) Then
                Return Nothing
            End If
            If (parCodEmpresa = CodeFluentPersistence.DefaultInt32Value) Then
                Return Nothing
            End If
            Dim sistema As S5T.Sistema = New S5T.Sistema()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "sistema", "LoadByCodSistemaCodEmpresa")
            persistence.AddParameter("@parCodSistema", parCodSistema)
            persistence.AddParameter("@parCodEmpresa", parCodEmpresa)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    sistema.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    sistema.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return sistema
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        Public Overridable Function Reload(ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions) As Boolean
            Dim ret As Boolean = false
            If (Me.pId = -1) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "sistema", "Load")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecord(reader, options)
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    ret = true
                Else
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return ret
        End Function
        
        Protected Overridable Function BaseSave(ByVal force As Boolean) As Boolean
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) Then
                S5T.Sistema.Delete(Me)
                Return false
            End If
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return false
            End If
            CodeFluentPersistence.ThrowIfDeleted(Me)
            Me.Validate
            If ((force = false)  _
                        AndAlso (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged)) Then
                Return false
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "sistema", "Save")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            persistence.AddParameter("@pNome", Me.pNome, CType(Nothing, String))
            persistence.AddParameter("@pCodigo", Me.pCodigo, CodeFluentPersistence.DefaultInt32Value)
            persistence.AddParameter("@xDataHoraReg", Me.xDataHoraReg, CodeFluentPersistence.DefaultDateTimeValue)
            persistence.AddParameter("@xLoginReg", Me.xLoginReg, CType(Nothing, String))
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecordOnSave(reader)
                End If
                CodeFluentPersistence.NextResults(reader)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Me.SaveoEmpresasRelations
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false))
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
            Return true
        End Function
        
        Public Overloads Overridable Function Save() As Boolean Implements CodeFluent.Runtime.ICodeFluentEntity.Save
            Dim localSave As Boolean = Me.BaseSave(false)
            Return localSave
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Shared Function Save(ByVal sistema As S5T.Sistema) As Boolean
            If (sistema Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = sistema.Save
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Shared Function Insert(ByVal sistema As S5T.Sistema) As Boolean
            Dim ret As Boolean = S5T.Sistema.Save(sistema)
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Shared Function Delete(ByVal sistema As S5T.Sistema) As Boolean
            If (sistema Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = sistema.Delete
            Return ret
        End Function
        
        Public Function Trace() As String
            Dim stringBuilder As System.Text.StringBuilder = New System.Text.StringBuilder()
            Dim stringWriter As System.IO.StringWriter = New System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture)
            Dim writer As System.CodeDom.Compiler.IndentedTextWriter = New System.CodeDom.Compiler.IndentedTextWriter(stringWriter)
            Me.BaseTrace(writer)
            writer.Flush
            CType(writer,System.IDisposable).Dispose
            CType(stringWriter,System.IDisposable).Dispose
            Dim sr As String = stringBuilder.ToString
            Return sr
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub CodeFluent_Runtime_ICodeFluentObject_Trace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter) Implements CodeFluent.Runtime.ICodeFluentObject.Trace
            Me.BaseTrace(writer)
        End Sub
        
        Protected Overridable Sub BaseTrace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter)
            writer.Write("[")
            writer.Write("pId=")
            writer.Write(Me.pId)
            writer.Write(",")
            writer.Write("pNome=")
            writer.Write(Me.pNome)
            writer.Write(",")
            writer.Write("oMenus=")
            If (Not (Me._oMenus) Is Nothing) Then
                CType(Me._oMenus,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("oEmpresas=")
            If (Not (Me._oEmpresas) Is Nothing) Then
                CType(Me._oEmpresas,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("pCodigo=")
            writer.Write(Me.pCodigo)
            writer.Write(",")
            writer.Write("oMenuPermissoes=")
            If (Not (Me._oMenuPermissoes) Is Nothing) Then
                CType(Me._oMenuPermissoes,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("xDataHoraReg=")
            writer.Write(Me.xDataHoraReg)
            writer.Write(",")
            writer.Write("xLoginReg=")
            writer.Write(Me.xLoginReg)
            writer.Write(", EntityState=")
            writer.Write(Me.EntityState)
            writer.Write("]")
        End Sub
        
        Public Overloads Overridable Sub SetoEmpresas(ByVal values As System.Collections.IDictionary)
            If (values Is Nothing) Then
                Throw New System.ArgumentNullException("values")
            End If
            Me.oEmpresas.Clear
            Dim enumerator As System.Collections.IEnumerator = values.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                If (Not (entry.Key) Is Nothing) Then
                    Me.oEmpresas.AddByEntityKey(entry.Key.ToString)
                End If
                b = enumerator.MoveNext
            Loop
        End Sub
        
        Public Overloads Overridable Sub SetoEmpresas(ByVal values As Object)
            If (values Is Nothing) Then
                Return
            End If
            Dim dictionary As System.Collections.IDictionary = Nothing
            Try 
                dictionary = CType(values,System.Collections.IDictionary)
            Catch icex As System.InvalidCastException
                dictionary = Nothing
            End Try
            If (Not (dictionary) Is Nothing) Then
                Me.SetoEmpresas(dictionary)
                Return
            End If
            Dim oEmpresas As S5T.EmpresaCollection = Nothing
            Try 
                oEmpresas = CType(values,S5T.EmpresaCollection)
            Catch icex1 As System.InvalidCastException
                oEmpresas = Nothing
            End Try
            If (Not (oEmpresas) Is Nothing) Then
                Me._oEmpresas = oEmpresas
                Return
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shared Function LoadByEntityKey(ByVal key As String) As S5T.Sistema
            If (key Is String.Empty) Then
                Return Nothing
            End If
            Dim sistema As S5T.Sistema
            Dim var As Long = CType(ConvertUtilities.ChangeType(key, GetType(Long), -1),Long)
            sistema = S5T.Sistema.Load(var)
            Return sistema
        End Function
        
        Protected Overridable Sub ValidateMember(ByVal culture As System.Globalization.CultureInfo, ByVal memberName As String, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException))
        End Sub
        
        Public Overloads Function Clone(ByVal deep As Boolean) As S5T.Sistema
            Dim sistema As S5T.Sistema = New S5T.Sistema()
            Me.CopyTo(sistema, deep)
            Return sistema
        End Function
        
        Public Overloads Function Clone() As S5T.Sistema
            Dim localClone As S5T.Sistema = Me.Clone(true)
            Return localClone
        End Function
        
        Function System_ICloneable_Clone() As Object Implements System.ICloneable.Clone
            Dim localClone As Object = Me.Clone
            Return localClone
        End Function
        
        Public Overridable Sub CopyFrom(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            If (dict.Contains("pId") = true) Then
                Me.pId = CType(ConvertUtilities.ChangeType(dict("pId"), GetType(Long), -1),Long)
            End If
            If (dict.Contains("pCodigo") = true) Then
                Me.pCodigo = CType(ConvertUtilities.ChangeType(dict("pCodigo"), GetType(Integer), CodeFluentPersistence.DefaultInt32Value),Integer)
            End If
            If (dict.Contains("xDataHoraReg") = true) Then
                Me.xDataHoraReg = CType(ConvertUtilities.ChangeType(dict("xDataHoraReg"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("xLoginReg") = true) Then
                Me.xLoginReg = CType(ConvertUtilities.ChangeType(dict("xLoginReg"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("pNome") = true) Then
                Me.pNome = CType(ConvertUtilities.ChangeType(dict("pNome"), GetType(String), CType(Nothing, String)),String)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal sistema As S5T.Sistema, ByVal deep As Boolean)
            If (sistema Is Nothing) Then
                Throw New System.ArgumentNullException("sistema")
            End If
            sistema.pId = Me.pId
            sistema.pCodigo = Me.pCodigo
            sistema.xDataHoraReg = Me.xDataHoraReg
            sistema.xLoginReg = Me.xLoginReg
            sistema.pNome = Me.pNome
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, sistema))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            dict("pId") = Me.pId
            dict("pCodigo") = Me.pCodigo
            dict("xDataHoraReg") = Me.xDataHoraReg
            dict("xLoginReg") = Me.xLoginReg
            dict("pNome") = Me.pNome
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict))
        End Sub
        
        Protected Sub OnCollectionKeyChanged(ByVal key As Integer)
            If (Not (Me.KeyChangedEvent) Is Nothing) Then
                RaiseEvent KeyChanged(Me, New CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of Integer)(key))
            End If
        End Sub
    End Class
End Namespace
